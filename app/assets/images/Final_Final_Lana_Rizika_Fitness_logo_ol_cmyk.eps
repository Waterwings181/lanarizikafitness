%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Final_Final_Lana_Rizika_Fitness_logo_ol_cmyk.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Rachel Reisig
%%CreationDate: 3/13/15
%%BoundingBox: 0 0 234 108
%%HiResBoundingBox: 0 0 234 108
%%CropBox: 0 0 234 108
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 5856 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD2FFFCACAC9CAC9CFC9CFCA%CFCAFD72FFCAC9A7CFCACAA7CAC9CAA7CACACAA7CACFFD6EFFCACFCACAC2%C299C1BBBB99C1BBC2C9CFCACACAFD6BFFC9C9CFC3C198BB99BB99BB99BB%98BB99BB99C2CACFA7CFFD67FFCFCACFCA99BB99BB99C199BB99BB99BB99%C199BB99BBC2FFC9CFFD65FFCAC9CAC299BB98BB99BB98BB99C9A1C299BB%98BB99BB98BB99CAA7CAFD64FFCACFC299BB99C1BBBB99C1BBFD04FFC299%C1BBBB99C1BBBB99CACACAFD62FFC9CFC292BB99BB99BB99BB98C9FD04FF%CABB99BB99BB99BB99BB98CACACAFD60FFCACFC299BB99C199BB99C199BB%CAFD05FFC2BB99C199BB99C199BB99CFCACFFD5EFFCACAC992BB99BB98BB%99BB98BB99FD06FFC299BB98BB99BB98BB99BB99CFC9FD31FFCFFD2CFFCA%CF99C1BBBB99C1BBBB99C199C2FD06FFC2BB99C1BBBB99C1BBBB99BBC3CF%CAFD06FFA87DFD1FFFC1CFFD06FFC2C9FFC2CAFD28FFC9CFA0BB99BB99BB%99BB99BB99BB99FD06FFC299BB99BB99BB99BB99BB98BBCACAFD06FF7D7D%FD1FFFC2C9FD06FFC3A1FF99CAFD28FFCACAC199BB99C199BB99C199BB99%C1CFFD05FFA0BB99BB99C199BB99C199BB99C9CACFFD05FFA87DFFFFFFA8%A87DFD05FFA8A87DA8FD05FFA87DA8FFFFA8FFCACFC3CFC9CFC9C9C3C9C3%FFCACFFFC1CAFFFFCAC9FFFFCFC2C2C9FFC9FD1BFFCFCAC392BB99BB98BB%99BB98BB99BB98CAFD04FFCFBB98BB99BB98BB99BB98BB99BB99CFC9FD05%FF7D7DFFFFFD047D527D7DFF7D7D7DA8537DFFFFA87D53A87D7D527DFFC2%99C1A7C2C9C399C299BBA7C2A0FF99CFFFC998CAFFC399C2A0C199BBCAFD%1AFFCACF9FBBBBBB99C1BBBB99C1BBBB99BBC2FD04FFCA99C1BBBB99C1BB%BB99C1BBBB99BBC9CFFD05FFA87DFF7D7DFD04FF52A8FF7E7DFFFFFF7DA8%FFA87DFFFFFFA87D7DFFC1C2FFFFBBCAFFFFFFC2C2FFC2C9FFC2CFFF99CA%FFCA99FD04FFC2BBFD1BFFCACABB99BB99BB98BB99BB98BB99BB98C1CFFF%FFFFA0BB99BB99BB98BB99BB98BB99BB92C9CACAFD04FF7DA8FF7DA8FD04%FFA87DFF7DA8FFFFFFA87DFF52FD05FF7D7DFFC2C9FFCFC1C9FFFFC999FF%FFC2C3FF99CF99C3FFFF99C3FD04FFCAC1CAFD1AFFC9CA99BB99BB99C2C3%C9C9C9C2C299BB99CAFFFFCAC199BB99C3FD04C9C2C199C199BBA0CFCAFD%04FFA87DFF7DFD05FFA8A8FF7DA8FFFFFFA8A8FF7DFD05FFA87DFF9FCAFF%FF99CAFFCF99CFFFFFA0C9FFC199BBCFFFFFC2C9FD05FF99FD1AFFCACAA0%BB99BB99CFFD07FFCAA0BB99FFFFC292C2C9FD07FFCFC298BB99C1A7CAFD%04FF7D7DFF7DA8FD04FF7D7DFF7DA8FFFFFFA87DFF52A8FD04FF7D7DFFC2%A1FFCFC1A7FF99C2FFFFFFC2A0FF99C1A0C2FFFFA0C2FD04FFC9BBA8FD1A%FFCAC999BB99FD0CFFC9CAFFC3CFFD0BFFC299BB99FFC9FD04FFA87DFFA8%7DA8FFFFA852A8FF7DA8FFFFFFA8A8FFA853FFFFFFA87D7DFFC1CAFFFF99%CFC2C1CFFFCFFFC2C9FFBBC9FFC1C2FFFFBBC9FFFFCAC199FD1AFFCACAA0%BB99C1FD0EFFCFFD0DFFA0BB99BBCACAFD04FFA87DFFFF7EFD047D7E7DFF%7DA8FFFFFFA87DFFFFA852FD047DA8FFC2A7FFFFC2A1C199C199BBC3C2A1%FF99CFFFFF99C9FFCA99C299C2C2C2CAFD1AFFCAC999BB99FD0CFFCACAFF%C9FD0CFFC299BBBBCFC9FD0BFFA8FD0FFFA8FD0BFFCFFFCFFFCAFD09FFCF%FFFFFFCACAFD1DFFA8CFA0BB98BBA0FD09FFA1C199FFFFC299C3A8FD08FF%C999BB98C1CACAFD59FFCAC999C1BBBB99C9C9CFCACFC9C299BB99C9FFFF%CABB99C1C2C9C9FFCACFC3C299BB99BBC2CFCAFD59FFCAC9BB99BB99BB92%BB99BB99BB99BB98C1CAFFFFFFA0BB99BB99BB99BB99BB98BB99BB92C3CA%CFFD59FFC9FFBBBB99C199BB99BB99BB99C199BBA0FD04FFCA99BB99C199%BB99BB99BB99C199BBC9CFFD06FF7D7EA8FD05FFA8A8FD06FF7DA87DFD06%FFA8A8FFA8FD07FF7D84A8FD07FF7DA8FD06FFA87D7EFD1BFFCAA8C399BB%98BB99BB98BB99BB98BB99C9FD04FFA8BB99BB98BB99BB98BB99BB98BB99%CAA7FD05FF7D2752A8FD05FFA827FD05FFA8522759A8FD05FF2727A8527D%FD05FF7D27527DFD06FF27527DFD05FFA852527DFD1BFFCFCFCABB99C1BB%BB99C1BBBB99C1BBC1CAFD05FFC2BB99C1BBBB99C1BBBB99C199C2CACFFD%05FFA8277DA8FD05FFA852FD07FF52FD07FF7D277D52A8FD05FFA8277D7D%FD06FF5252A9FD06FF527DA8FD1CFFA7FF99BB99BB99BB99BB99BB99BB99%FD06FFC299BB99BB99BB99BB99BB99BBC9CACAFD05FF7D527DA8FD05FFA8%27FD07FF27FD07FF28A852277DFD05FF7E527DA8FD06FFA87D27FD07FF52%28AFFD1CFFC9CF99BB99C199BB99C199BB99C2FD06FFC2BB99BB99C199BB%99C199BBC2CFCAFD06FFA852FD07FFA852FD07FF52A8FD06FF52A8A827A8%FD05FFA8275252FD05FFA852277DFD06FF52527DFD1DFFCAA8C393BB98BB%99BB98BB99BB99FD06FFC292BB99BB98BB99BB98BB99CAA7FD07FFA8FD09%FFA8FD07FFA8FD07FFA8FD09FFA8FFA8FD07FFA8A8FD08FFA8FD1FFFCFCA%C299C1BBBB99C1BBBB99C1CFFD05FFC2BBBBBB99C1BBBB99C199CACACFFD%5FFFCACACABB98BB99BB99BB99BB98C9FD04FFCABB98BB99BB99BB99BB92%C9CACAFD61FFC9CFCAC199C199BB99C199BB99FD04FFC999BB99C199BB99%BB99C9CACAFD63FFA7CAC9C292BB99BB98BB99BB99CACAC298BB99BB98BB%99BB98C9CAC9FD65FFCACACAC9BBBB99C1BBBB99BB99BB99C1BBBB99C199%BB9FCFCACAFD67FFCACACACFA0BB92BB99BB99BB99BB99BB99BB98C2C9CF%A7CAFD6AFFCFC9FFCAC99FC199BB99BB99BB99C2C2CACACFCACFFD6DFFA7%CACACFA7CAA1C9A1C9C9CAA8CFC9C9A8FD72FFCACFCACFCACFCACFC9CFCA%FD78FFCFFFCAFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD72FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 173 C)
%%CMYKCustomColor: 0 0.6900 1 0.0400 (PANTONE 173 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-03-13T11:58:09-07:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-03-13T11:58:09-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-03-13T11:58:09-07:00</xmp:ModifyDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>120</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FUJLqtlHN6PMyTVjrHGC7ATMVRiFBotQd8qOaINddvtbo4JEXW2/2IefWZ44+YsZFHB2UTSRR&#xA;VZJAnH4nNKr8YPSnvlcs5Avh+ZA6/gtkdOCa4h8AT0vu+C5NXZ3YR2xmjDSBZIZIpKxogYPxDV+J&#xA;vgA6164Rns7C+fIg/juQdPQ3NHbmCN75fDmqRaxZuypIWt5XMaCOdTGTJKnqLGCfhZuINQpNMlHP&#xA;E89jtz896Yy08huNxvy35Gr9yNy5odirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdiqldXUFrA087cYloGYAt9ohRsoJ6nIzmIizyZwgZmhzYd5n872+lsFuXY3ilWT&#xA;S7d6FGjkajTTqSOEicapxzV6rXCHP6v5o/SfPudxouzTl+n6f5x8x0j3jvec6h531+6jEEEo0+zU&#xA;cY7WzHooqjtUfEfpOaTJrckhQPDHuGz0WLs3FE2Rxy75bpRb21/qFyIreOW6uX34oGkc+J2qcx4x&#xA;lM0BZcuc4Y42SIx+Td5Yahp84ivIJLWcDkFkUo1PEVpjPHKBqQorjywyC4kSCaaX528y6cVEV400&#xA;K/7ouP3sdPABt1/2JGZGLW5YcjY7ju4ubs7Dk5xo942LPPKfnmxvPTtYf9BuwERNPduUEiRIwWO2&#xA;YlRG7sR9uv05ttJroy2HpPd026R7ifN0Wu7NlC5H1R/ndRZ5y7wPJndlexXUbFKCSJvTuIqgmOXi&#xA;GZCRtUch0zcY8gkPdz8i6LJjMT5Hl5jvV8m1uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KrZZY4o2kldY40BZ3YgKAOpJPTASALKYxJNDm8+88ebpNOVWjBTVplb6nGwUPa&#xA;RP8AC7MUd1dpOFU8Bml12sMOX1nl/RH6b6PQdm6AZOf92Of9I9Om1dXlMkkksjSSMXkclndiSxJ3&#xA;JJPU5z5N7l6oAAUFuBL2X8p9IgtvLo1DiPrF+7Ev3EcbFFX5VUnOn7IwiOLi6yeO7d1Blm4OkfvO&#xA;6N/MnSIL/wArXMrKDPZD14H7ihHMfIrlnaeETwk9Y7tPY+c484HSWx/Q8NzlHt3Yq9M8i+cbi+eK&#xA;zu5S2p2yUtpm5uZ7cEPLDwDqplIT4WI/t3mg1hlUZfUOXmOo9/cXmu0+zxC5RHolz8j0PL6e8PTI&#xA;JlmhSUArzAJRtmUnqrDsR0Ob6MrFvNSjwml+SYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxVKteu0hhpKaWsaPcXpHosPRjFSjxyVJWT7NVHXMbUzob8uZ5ch0o97l6XGSdvq&#xA;O0efM9bHd5vBNV1K41PUZ764NZZ3LEDoo6Ko9lGwzkMuQzkZHmXvMGEY4CA5BCZW2uxV7n+Wlyk/&#xA;k2yVT8UJkikHgRIzD/hWGdZ2XIHAPK/veH7ZgY6mXnR+xF+eZ44PKWqPIaBoDGP9aQhF/Fss18gM&#xA;Mvc09mRMtRCu/wC54DnHvfOxVUtrme2uIriBzHNCweNx1DKag5KMjE2OYYzgJAg8i938p6lHeWsV&#xA;xAnC2vYvXCJGiRRzBis6cgeTM0lW3HTOs0eUSAI5SF8tgev2vC67CYSIPOJrnuR/D8K2ZBmc69iv&#xA;kuQm+8yl2+FdUloSdgAowlV0n5h6Q00iWFnf6pHEeMtzY25liUjr8RK9PbGlRekeddB1a/jsrGR5&#xA;J5IWmIK8eHBuLI4PxBge1MCoEfmRosjtFZ2l9f3EbMstvaweq6BG48mowFCRtvhpU20HzNpetpL9&#xA;ULpPbnjc2s6mOaMnpyU/LtgVC6v500rTr79HpFc6hqAHJ7SxiM0iDxYVAH34qho/zF8vsyQyrcW1&#xA;680cBsZ4vTnUymisVY04+NCaYaVEax540XSr6SwuFme7RUZYok5l/U6BNxv88wc2vx45GJu3Yafs&#xA;zLlgJxrh8zyQEOpafa+ZdY1AfWpZxaW7zWKxAlVYJx4Uapbf4hTbKI5YxzTn6r4RtXu83IlhnLBC&#xA;HpA4peq/f5L7j8ydIto/UuLDUIY605yW/Fan3LDJS7UgNzGY+DGPY+SRoSgT/WRNlLZTec5Zkll+&#xA;sSadG31dkAQRtICG5cvte3H6cnjMTnJBNmA2a8sZDTAEChM7+dIT8trhI/JUM9xJxjjaZpJHOwVX&#xA;JJJPgMr7MkBgs+bb2xAnUkAdyc6d5k02+0qTVhzt9PQt+/uAIwyrsXXc/DXYZlYtVCcOPlHzcLNo&#xA;5wyDHzn3DdK/+Vh6WUM6WGoyWIr/AKetsfQoP2uRNafRmP8AylCr4Z8PfWzlfyTkujKHF/N4t010&#xA;fzJpWr3F1DYSGUWghZ5QPgYTqWXia12pQ1AocycOqhlJEd6r7XF1GjyYQDMVxX9iaZkOK7FXYq7F&#xA;XYq7FWBfmXdSQaNqLFWUzyW9lG7RKp40M78JQeTqaUIPQg5pu05EQl5kDl8ebvux4CWSPkJS5/5o&#xA;sdC8r03TL/U7tLSxhae4foi+A6kk7Ae5zQY8UpnhiLL1ObNDHHimaDMYPyf8xvGGlubWJj+wWdiP&#xA;mQlPuzZR7HykbmI/HudPLt/CDsJH5frQmpflZ5qs1LxJFeoBU+g/xD/YuEJ+iuV5eys0eVS9zdh7&#xA;bwT2JMff+xO/yn1C4sdRvNBvUeCSUevFFIpVhIgo4oe5Wh+jMrsjKYTOOW1uF27iE4Ryx3A2+HT8&#xA;eaL/ADb1SWSOy0G1Vpbi4b15Y0BZiq1WNaDryap+jLe2MpNYxzO/6mnsHAAZZZbAbfrYtpn5Yea7&#xA;1VeSFLKNtwbhuLU/1FDMPpAzX4uy80+nD73aZu2tPDYHi9yPl/J7zCqEpdWrsOi8pBX6eGXHsbL3&#xA;x+39TQPaDDe4l9n62I6voup6RdG11CBoJaVWu6sPFWGxHyzW5sM8ZqQou3waiGWPFA2GfflhdltN&#xA;CFA72V8nB/SaZ1ju0KMFKkemOSVLHbrXNv2XP0/1Zd1/Vt8Pe6DtrHU7/nQ763jv8fc9PzoHmHmN&#xA;/NcQ+WfPTwEiQ6kykr14O8av/wAIThQ9C0a0sLTSrS3sAos0iX0CvQqRUN7lupOBLFxa2UH5rB7c&#xA;BZp9NaS6C/z+oFBPuVUYVVfyytoY9HvplUCSe/uDI3c8W4gfIYlW5YxD+ZyPCKPc6UxmWtA7JLRS&#xA;fegAriq38ro4G8tm9PxajeTzPqMh+2ZRIwAau/2aGnviVUvzJtbEvoV06qL1dSgjif8AaMbNV1+V&#xA;QD/t4hUTZQQv+ZOpTOgaSKyh9NiK8eRAJH0bZrMcQdXI90Q7bJIjRQHQzLWlED8xtcJ2Atbep/2K&#xA;4MX+NT/qj9Cc/wDiWP8ArS/Sh4AfN/mD6y3xeXdIkIgX9m5uR1f3Ve39pyEf8Jy3/kofafx+N2cv&#xA;8Ew8P+WyDf8Aox/X+OiNt/8AyZF3/wBsyP8A5PZbH/Gz/U/S0z/xKP8Aww/c8/0XWFudE03Q7oy2&#xA;2hrckareKDxZpHZ44iw+ypp8R/pvpsObihHGbGO/UfuD0Go0/DlnljUsvD6R7uZZx56hgEGgWBUJ&#xA;pEt/BFcIvwpwA+BDT9k/wzba+IrHH+DiFuj7MkbyT/yggSP1svVFVQigBQKBQKAAdqZswHUEsO8l&#xA;2tla+avNUFkALdJbbiq7KrFZC6gduLkjNZoYxjmyiPKx+l3HaM5SwYTLnUv0V9jMs2jpnYq7FXYq&#xA;7FXYq8y/M+NRpMpQIP8AcmPV4LIlWa2qvPnszUHVNvprmg7UHoP9fz7vxyem7FP7wX/qfl/O8uXx&#xA;3Q35OXthFeX9tKVS8uFjMBbYsqcuarXvuDT+mQ7GyREpA/UeTZ7QY5mMZD6RdvVs6J5VxIAJJoBu&#xA;ScVY/Pr/AJavdYtdPhZL7U1YtC8ID+jxBLOZRsNhuAd+mYMtRinMRHqn5dPi7COlzwxmZ9MPPr8F&#xA;0uu+W9O12S1vClnqM6q4uZgFEqUoKS9KDjShpv0wnPihkIl6ZHqevxRHTZsmISj6oDoOnwT1WV1D&#xA;IQysKhgagjMwG3BIpvCh5p+cl7YNDYWYZWvkdpGAoWSMrTfw5Gn3Zoe2px9Mf4npfZ7HMGUv4f0p&#xA;b+WPpiz1T1CgV7jT1UyPJGpb1XoA0e/LwHQnrtlHZlcMr74d/ee5ye2b4oV/Nn3HoO/8dz13OleR&#xA;SbTPLUFp+l0nkF1Bq9xJPLEycQqyrxMZ3bl89sVSu38p+ZNMQ2uja96OnCvowXMCztCCeiOSKgdg&#xA;cKqmieRhpmvfpp9QlvLqSF47ppl+KSR2B5ghqKoCgBafTiqaeW9C/QthJaev9Y9SeWfnx4U9VuXG&#xA;lW6YFdJoXPzNDrnr09K1a0+r8evJ+fLnX8KYqltx5QvrXUZ7/wAvakdNa7bnd2jxCa3d+7hSV4Me&#xA;9MKoO5/L++1G6tr/AFbWXur+2njlipEEhREbkyJGGG7UHxV+jG1T+30P0fMV3rHrcvrUMcHocacf&#xA;TNeXKu9flmNHT1lOS+YqnKnqbwxx19JJtLdT8nT3d7q91DqJtpNVgit/hj5GNYyvLfmvLmqle3XK&#xA;MuiMpTkJVxgDl+1ycPaAhGETHi4CTz5/Z0Q9h5R81afZxWdn5lENtCOMcYsIDQdepYk/M5DHo80I&#xA;iMclAf0Q2ZdfgySMpYrkf6ZTWx0CeDW/0tPefWJ2so7OUemE5OjBml2ag5H9kDbMjHpyMnGTZ4a5&#xA;fa4mXVCWLwxGhxmXP7P2qOi+T7Kw8ttoV0wvIJC5lfh6fLmag0q267UNe2QwaKMMXhn1Bs1HaEp5&#xA;vFj6SPi1a+UkPl99C1S6OoWlaW8hT05Y0G6DlVqlOxp7UpjDR/uvDmeIdO8LPX/vvFxjgl16g/2o&#xA;ZPLvm+OEWaeY/wDRAOKytbqbgJTpz5df8rrlY02cDh8T0+7dtOr05PEcXq/rbfJFeWPKNv5fur+W&#xA;C4eaO+9H4ZBV1aJWDMz1+Iuzlugplul0YwmRBvir7GrW686iMQRRjf2+Xkn+Zjr3Yq7FXYq7FXYq&#xA;wj8xLFrnStTiDhpEjiv4YjKzNSA+nMViIoiKjVqDuc1PaWPijIe6XPu2O3R3fZOXhyQPmYnbv3G/&#xA;U28cVmVgykhgagjYgjOaexITu287+bLdAkeqT8QKDmRJt83DZkx1uaPKRcKfZunkbMB9yD1DzBrm&#xA;orxvr6adP99u54f8D9n8MryajJP6pEtuLS4sf0xAeh/k7o6rb3mruPjkb6tCfBVozn6SV+7N12Nh&#xA;2M/g8/7QaizHGPef0Iz83NHFzokOpIP3ti/Fz/xVKQp+5+OWdsYeKAn/ADfuLT2DqOHKYHlIfaP2&#xA;PLtP13WdO2sb2a3U9Ujdgp+a9M0GPPOH0kh6fLpseT64go+bz15umTg+qTAeKEIf+CQKculrsx/i&#xA;LRHszTg3wBJJJJJHaSRi7sas7Ekk+5OYpNuaAAKD1L8r7J4tKgerI99cvMeEioxgtl4glCCzoZGK&#xA;mnTN92XAiI/pSvn0H3i3l+2sgMz/AEY1y6y+409HzevOMJ/5WzoLeYLjQ4NP1O5ubW6+pXE8FqZI&#xA;El5catIrbL3qe2Ks2xVJ7zzVplp5nsPLcok/SGpQyz25VQY+EIJbk1ag7bbYqnGKsG1z83tB0bW2&#xA;0a50zVZLzm6Q+jaF1mMYDOYTyBkCg1NBtirNbeYT28U6qyLKiuEccWAYVow7HxxVjvnX8w/L3k0W&#xA;La0ZlTUHaOJ4UDhSnHkX3BA+PtXFUZZ+b9IvPMs/l63Lve29rHfNIADC0MpAUq4O5PLwxVOsVYVc&#xA;/mxoUOvXOiR6dql1c2c4triW2tTLCjtSlXVthv3xVmuKsb83+fNH8rvZwXcN1e32oFxZ6fYRevcS&#xA;CIAuwSq7KDvviqc6RqcOqaZbajDFLDFdIJEiuEMUoB6ckO4xVQ8x+YtL8u6Lc6zqkhisrRQZGUFm&#xA;JZgqqqjqWZgBiqF8p+bbbzLbTzwWF/p/1dxG8Wo25t3JK8gVBLBhQjviqeYq7FXYq7FXYq7FUBrE&#xA;VYRORzjiqJ4S6xxvC44yeoWVqqqktTbcZRnjtfdz6bdb+9yNPLeu/ltZvpXv5PBvMWjPpGqSWwb1&#xA;LZwJbOftJA+6OPo6++cjqMPhzrp08w93pNR4sOLryI7j1SzKHJdir3b8uEjXyZp3D9oSsx9zM9f6&#xA;Z1vZg/cR+P3l4Xtgk6mV+X3BF+dEV/KeqhhUC3c091FR+IyzXD9zL3NXZxrUQ/rPn7OOe/diqL0n&#xA;TLnU9RgsbcfvZ2pyPRV6sx9lG5yzFjM5CI6tWfNHFAzPIPePLljDBbIYN7SKNILE1idWiQV9ZHjq&#xA;aTVqantnXaXGANuQ2HLl37d7wmsymUt/qJuXPn3G/wCanGZThvLvLH5Y3486a/ruqzX1gj6t9d0y&#xA;K2ulWC4iVuYM0UZaoJFCGoaYVeo4FYVrXl3Wbn81fLuuw2/PSrGzuobq45oODyqwQcCwc1r2XFWa&#xA;4qxDzNoGrXv5heS9XtoPU0/Sf0n+kJ+aL6f1m2WOL4WYM3JhT4Qad8VZfirAfzM8l3nmfW/KyizF&#xA;3pNrcXH6Xq6LwhmjVK0ZlY/7EEjFUi/Kv8v/ADh5a876nLqwM+kQ2QsNJ1AyRMZIY5VaJSit6ilU&#xA;2+JaClBtTCr1vArxC98kecLf8wNW1dPLN1qVrc6gl1Z3UGrwWMfBOO7wEuX3HenhhV7fgV5z+b+g&#xA;alqyac+n+XpdWurb1jBqFperZXNpKwHAoW+0rMPi8KYqyvyTZ6/Z+VNMtfME31jWYoQLyUt6hLVJ&#xA;AZ/2iFoCe5xVR/MDTZdS8p31jHpC660wQfo15hbB6OGqJTTiVpUe+KpB+UOiebdLsdSTW0uLXT5Z&#xA;kOjabeXK3k9vEqkOGlXbiTTivan3qvQMVdirsVdirsVdirsVYd5w8qx6lbNBKTUs0ljeN6kjRSvy&#xA;eRJTTilvRQBvtmr1uk4xR+B329/dF3HZ+uOM2P8AOGwsbAV3y+94/qWmXum3b2l5EYpk7HoR2ZT0&#xA;ZT2Izm8mOUDUhu9fhzRyR4omwhcrbXqf5V+a7BNOOi3kywTROz2rSEKrI5qVBO3INU/TnQdlauIj&#xA;4cjXc8v23oZmfixFg80Z+ZnmzTodFl0q1nSa8u6LIsbBvTjBBYsR0JpSmWdqauIx8ETZLT2NoZnK&#xA;MkhUY/aXkGc29crWlpc3dxHbW0bTTynjHGgqSTkowMjQ3LGc4wBlI0A9a8meTjpaPEWP6QlC/X7p&#xA;CVMKECRI4GZGSTlSkhBzodFo+Db+Lqe7qANt/N5PtHtDxTf8A+kd/Qk72PJnSIiIqIoVFFFVRQAD&#xA;sAM3AFcnREk7lvCh2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbLFHL&#xA;G8UqLJFIpWSNgGVlYUIIOxBGAgEUUxkQbHNj2u+V7e9tniltxf24DvFCSEnjc8QiW8nwKkagH4Wr&#xA;mDqNIJCq4h9o9x6B2Ol1phKweE/Ye8yHU+bz7Vfy1lSeQaXepKFMvG2uq283GFgrsvIBXUE/b2Ga&#xA;bL2aQfQb57HY7fjm9Bg7YBA8SJHLeO43+4+SST+SPNsL8X0udj4xr6g+9CwzFlocw/hLmx7S08v4&#xA;x933tReSvNkr8V0q4BP86FB97UGI0WY/wlZdo6cfxxTbT/y3vWcHVLuKzWiM0EX+kz8ZH9NW4RVH&#xA;EttyrmRj7Nl/GRH7T3dHEy9rx/giZc9z6RsL5l6D5e8o2+mxp9ThaxBoZZ3Kvdu0cv2WYc4xFIi9&#xA;Fpm502jEPpHD/uufyovP6vXnIfUeLy/h3HzsHvZJa2tva28dvbRrFBEOMcaigA9sz4QERQ2DrZzM&#xA;yZSNkquSYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVTnt7&#xA;eeNo54kljdSjo6hlKnqCD2ORlEEURbKMzE2DRQ36G071DIsRR2dpWKO6Vd4/SYkKR+wKe3Ub5X4E&#xA;LuvxVNv5idVfl9t/e1HounJw+BmMfolS8kjUNuKRn4mO4rv4964jTwH2d/Tkp1Mz17+g/i5om3tL&#xA;W2RY7eFIUUEKqKFABPIgU9zXLIwjHkKa55JSNk2q5Jg7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:InstanceID>xmp.iid:0180117407206811B85D89558CE7959F</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0180117407206811B85D89558CE7959F</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F117407206811ABA89286C801C619</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>created</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T10:53:04-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:12:51-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:12:51-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:44:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:49:08-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:49:38-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:51:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F117407206811ABA89286C801C619</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:51:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811B85D89558CE7959F</stEvt:instanceID>
                  <stEvt:when>2015-03-13T11:58:09-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ea49d3db-278d-6f44-bc56-db3e9e100964</stRef:instanceID>
            <stRef:documentID>xmp.did:FF7F117407206811ABA89286C801C619</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F117407206811ABA89286C801C619</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:idPriv="http://ns.adobe.com/xmp/InDesign/private">
         <idPriv:DocChangeCount>119</idPriv:DocChangeCount>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF Library 9.0</pdf:Producer>
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.250000</stDim:w>
            <stDim:h>1.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 173 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 173 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>69.000206</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>3.999330</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -108 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 108 li
234 108 li
234 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 108 mo
234 108 li
234 0 li
0 0 li
0 108 li
cp
clp
155.866 54.7051 mo
156.71 54.7051 li
157.554 54.7051 li
157.554 47.2173 li
157.554 45.8657 157.913 44.8267 158.632 44.1006 cv
159.288 43.4517 160.174 43.0845 161.292 42.9985 cv
161.292 41.2285 li
159.815 41.2837 158.729 41.7524 158.034 42.6357 cv
157.854 42.8613 157.69 43.1357 157.542 43.4556 cv
157.542 41.5684 li
156.698 41.5684 li
155.866 41.5684 li
155.866 54.7051 li
cp
163.085 54.7051 mo
163.929 54.7051 li
164.772 54.7051 li
164.772 41.5684 li
163.929 41.5684 li
163.085 41.5684 li
163.085 54.7051 li
cp
163.096 39.9634 mo
164.772 39.9634 li
164.772 36.9517 li
163.096 36.9517 li
163.096 39.9634 li
cp
166.565 53.9673 mo
166.565 54.7051 li
176.292 54.7051 li
176.292 53.9434 li
176.292 53.1934 li
168.674 53.1934 li
175.846 43.0454 li
175.846 42.3076 li
175.846 41.5684 li
166.812 41.5684 li
166.812 42.3306 li
166.812 43.0806 li
173.771 43.0806 li
166.565 53.2285 li
166.565 53.9673 li
cp
178.085 54.7051 mo
178.929 54.7051 li
179.772 54.7051 li
179.772 41.5684 li
178.929 41.5684 li
178.085 41.5684 li
178.085 54.7051 li
cp
178.096 39.9634 mo
179.772 39.9634 li
179.772 36.9517 li
178.096 36.9517 li
178.096 39.9634 li
cp
183.007 54.7051 mo
183.851 54.7051 li
184.694 54.7051 li
184.694 52.1157 li
186.82 49.4287 li
191.086 54.7051 li
192.186 54.7051 li
193.284 54.7051 li
187.812 48.1475 li
192.979 41.5684 li
191.923 41.5684 li
190.878 41.5684 li
184.694 49.6494 li
184.694 36.9517 li
183.851 36.9517 li
183.007 36.9517 li
183.007 54.7051 li
cp
206.163 53.0176 mo
206.319 52.8613 206.464 52.6934 206.596 52.5146 cv
206.596 54.7051 li
207.44 54.7051 li
208.284 54.7051 li
208.284 41.5684 li
206.596 41.5684 li
206.596 43.7715 li
206.163 43.2676 li
204.874 41.9326 203.253 41.2646 201.3 41.2646 cv
199.37 41.2646 197.735 41.9287 196.396 43.2563 cv
195.056 44.5845 194.386 46.2134 194.386 48.1426 cv
194.386 50.0645 195.056 51.6895 196.396 53.0176 cv
197.735 54.3467 199.37 55.0107 201.3 55.0107 cv
203.253 55.0107 204.874 54.3467 206.163 53.0176 cv
205.132 44.3164 mo
206.155 45.3594 206.667 46.6396 206.667 48.1543 cv
206.667 49.6704 206.155 50.9517 205.132 51.9985 cv
204.108 53.0454 202.854 53.5684 201.37 53.5684 cv
199.885 53.5684 198.632 53.0474 197.608 52.0044 cv
196.585 50.9614 196.073 49.6826 196.073 48.1665 cv
196.073 46.6504 196.585 45.3696 197.608 44.3223 cv
198.632 43.2754 199.885 42.7524 201.37 42.7524 cv
202.854 42.7524 204.108 43.2734 205.132 44.3164 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .69 1 .04 cmyk
f
103.636 54.7051 mo
104.48 54.7051 li
105.324 54.7051 li
105.324 36.9517 li
104.48 36.9517 li
103.636 36.9517 li
103.636 54.7051 li
cp
119.667 53.0176 mo
119.823 52.8613 119.968 52.6934 120.101 52.5146 cv
120.101 54.7051 li
120.944 54.7051 li
121.788 54.7051 li
121.788 41.5684 li
120.101 41.5684 li
120.101 43.7715 li
119.667 43.2676 li
118.378 41.9326 116.757 41.2646 114.804 41.2646 cv
112.874 41.2646 111.239 41.9287 109.9 43.2563 cv
108.56 44.5845 107.89 46.2134 107.89 48.1426 cv
107.89 50.0645 108.56 51.6895 109.9 53.0176 cv
111.239 54.3467 112.874 55.0107 114.804 55.0107 cv
116.757 55.0107 118.378 54.3467 119.667 53.0176 cv
118.636 44.3164 mo
119.659 45.3594 120.171 46.6396 120.171 48.1543 cv
120.171 49.6704 119.659 50.9517 118.636 51.9985 cv
117.611 53.0454 116.359 53.5684 114.874 53.5684 cv
113.39 53.5684 112.136 53.0474 111.113 52.0044 cv
110.089 50.9614 109.577 49.6826 109.577 48.1665 cv
109.577 46.6504 110.089 45.3696 111.113 44.3223 cv
112.136 43.2754 113.39 42.7524 114.874 42.7524 cv
116.359 42.7524 117.611 43.2734 118.636 44.3164 cv
124.835 54.7051 mo
125.679 54.7051 li
126.522 54.7051 li
126.522 47.6973 li
126.522 46.1113 126.876 44.8916 127.583 44.0356 cv
128.29 43.1807 129.3 42.7524 130.613 42.7524 cv
131.894 42.7524 132.894 43.1743 133.613 44.0176 cv
134.331 44.8613 134.69 46.0293 134.69 47.5215 cv
134.69 54.7051 li
135.534 54.7051 li
136.378 54.7051 li
136.378 47.5684 li
136.378 45.5767 135.87 44.0225 134.854 42.9043 cv
133.839 41.7876 132.425 41.2285 130.613 41.2285 cv
128.979 41.2285 127.702 41.7993 126.781 42.9395 cv
126.511 43.2676 li
126.511 41.5684 li
125.667 41.5684 li
124.835 41.5684 li
124.835 54.7051 li
cp
150.699 53.0176 mo
150.854 52.8613 150.999 52.6934 151.132 52.5146 cv
151.132 54.7051 li
151.976 54.7051 li
152.819 54.7051 li
152.819 41.5684 li
151.132 41.5684 li
151.132 43.7715 li
150.699 43.2676 li
149.409 41.9326 147.788 41.2646 145.835 41.2646 cv
143.905 41.2646 142.271 41.9287 140.931 43.2563 cv
139.591 44.5845 138.921 46.2134 138.921 48.1426 cv
138.921 50.0645 139.591 51.6895 140.931 53.0176 cv
142.271 54.3467 143.905 55.0107 145.835 55.0107 cv
147.788 55.0107 149.409 54.3467 150.699 53.0176 cv
149.667 44.3164 mo
150.69 45.3594 151.202 46.6396 151.202 48.1543 cv
151.202 49.6704 150.69 50.9517 149.667 51.9985 cv
148.644 53.0454 147.39 53.5684 145.906 53.5684 cv
144.421 53.5684 143.167 53.0474 142.144 52.0044 cv
141.12 50.9614 140.608 49.6826 140.608 48.1665 cv
140.608 46.6504 141.12 45.3696 142.144 44.3223 cv
143.167 43.2754 144.421 42.7524 145.906 42.7524 cv
147.39 42.7524 148.644 43.2734 149.667 44.3164 cv
0 0 0 .6 cmyk
f
103.693 71.207 mo
105.409 71.207 li
105.409 68.1709 li
108.654 68.1709 li
108.654 66.5869 li
105.409 66.5869 li
105.409 65.0029 li
108.918 65.0029 li
108.918 63.4189 li
103.693 63.4189 li
103.693 71.207 li
cp
120.336 71.207 mo
122.052 71.207 li
122.052 63.4189 li
120.336 63.4189 li
120.336 71.207 li
cp
135.329 71.207 mo
137.045 71.207 li
137.045 64.9365 li
139.267 64.9365 li
139.267 63.4189 li
133.107 63.4189 li
133.107 64.9365 li
135.329 64.9365 li
135.329 71.207 li
cp
150.344 71.207 mo
152.06 71.207 li
152.06 65.6631 li
152.082 65.6631 li
155.481 71.207 li
157.725 71.207 li
157.725 63.4189 li
156.009 63.4189 li
156.009 68.8311 li
155.987 68.8311 li
152.676 63.4189 li
150.344 63.4189 li
150.344 71.207 li
cp
169.582 71.207 mo
175.071 71.207 li
175.071 69.623 li
171.298 69.623 li
171.298 68.0391 li
174.675 68.0391 li
174.675 66.4551 li
171.298 66.4551 li
171.298 65.0029 li
174.873 65.0029 li
174.873 63.4189 li
169.582 63.4189 li
169.582 71.207 li
cp
191.681 64.0352 mo
191.351 63.7422 190.981 63.5332 190.57 63.4082 cv
190.16 63.2832 189.734 63.2207 189.294 63.2207 cv
188.913 63.2207 188.543 63.2734 188.183 63.3799 cv
187.824 63.4863 187.507 63.6455 187.232 63.8584 cv
186.957 64.0723 186.737 64.3359 186.572 64.6504 cv
186.407 64.9658 186.324 65.333 186.324 65.751 cv
186.324 66.1836 186.414 66.5322 186.594 66.7959 cv
186.773 67.0596 186.999 67.2725 187.27 67.4336 cv
187.542 67.5947 187.835 67.7236 188.15 67.8184 cv
188.466 67.9141 188.759 68.0098 189.03 68.1045 cv
189.302 68.2002 189.527 68.3154 189.707 68.4512 cv
189.886 68.5869 189.976 68.7715 189.976 69.0068 cv
189.976 69.1455 189.941 69.2666 189.872 69.3701 cv
189.802 69.4727 189.71 69.5566 189.597 69.623 cv
189.483 69.6885 189.355 69.7383 189.212 69.7705 cv
189.069 69.8037 188.928 69.8203 188.788 69.8203 cv
188.502 69.8203 188.225 69.7568 187.958 69.6279 cv
187.69 69.5 187.468 69.3184 187.292 69.084 cv
186.071 70.4258 li
186.445 70.7705 186.849 71.0195 187.281 71.1738 cv
187.714 71.3281 188.183 71.4053 188.689 71.4053 cv
189.093 71.4053 189.476 71.3535 189.839 71.251 cv
190.202 71.1475 190.521 70.9912 190.796 70.7773 cv
191.071 70.5645 191.289 70.2979 191.45 69.9746 cv
191.612 69.6514 191.692 69.2744 191.692 68.8418 cv
191.692 68.3867 191.604 68.0234 191.428 67.7529 cv
191.252 67.4814 191.03 67.2646 190.763 67.1035 cv
190.495 66.9424 190.207 66.8174 189.899 66.7295 cv
189.591 66.6416 189.303 66.5537 189.036 66.4658 cv
188.768 66.3779 188.546 66.2715 188.37 66.1465 cv
188.194 66.0215 188.106 65.8428 188.106 65.6074 cv
188.106 65.4609 188.143 65.3369 188.216 65.2334 cv
188.29 65.1309 188.385 65.0488 188.502 64.9854 cv
188.62 64.9238 188.744 64.8779 188.876 64.8486 cv
189.008 64.8193 189.137 64.8047 189.261 64.8047 cv
189.474 64.8047 189.699 64.8467 189.938 64.9307 cv
190.176 65.0156 190.365 65.1455 190.504 65.3223 cv
191.681 64.0352 li
cp
208.203 64.0352 mo
207.873 63.7422 207.503 63.5332 207.092 63.4082 cv
206.681 63.2832 206.256 63.2207 205.816 63.2207 cv
205.435 63.2207 205.064 63.2734 204.705 63.3799 cv
204.346 63.4863 204.029 63.6455 203.754 63.8584 cv
203.479 64.0723 203.259 64.3359 203.094 64.6504 cv
202.929 64.9658 202.846 65.333 202.846 65.751 cv
202.846 66.1836 202.936 66.5322 203.116 66.7959 cv
203.295 67.0596 203.521 67.2725 203.792 67.4336 cv
204.063 67.5947 204.357 67.7236 204.672 67.8184 cv
204.987 67.9141 205.281 68.0098 205.552 68.1045 cv
205.823 68.2002 206.049 68.3154 206.229 68.4512 cv
206.408 68.5869 206.498 68.7715 206.498 69.0068 cv
206.498 69.1455 206.463 69.2666 206.394 69.3701 cv
206.324 69.4727 206.232 69.5566 206.119 69.623 cv
206.005 69.6885 205.877 69.7383 205.734 69.7705 cv
205.591 69.8037 205.449 69.8203 205.31 69.8203 cv
205.024 69.8203 204.747 69.7568 204.48 69.6279 cv
204.212 69.5 203.99 69.3184 203.814 69.084 cv
202.593 70.4258 li
202.967 70.7705 203.37 71.0195 203.803 71.1738 cv
204.236 71.3281 204.705 71.4053 205.211 71.4053 cv
205.614 71.4053 205.998 71.3535 206.361 71.251 cv
206.724 71.1475 207.043 70.9912 207.318 70.7773 cv
207.593 70.5645 207.811 70.2979 207.972 69.9746 cv
208.133 69.6514 208.214 69.2744 208.214 68.8418 cv
208.214 68.3867 208.126 68.0234 207.95 67.7529 cv
207.774 67.4814 207.552 67.2646 207.285 67.1035 cv
207.017 66.9424 206.729 66.8174 206.421 66.7295 cv
206.113 66.6416 205.825 66.5537 205.558 66.4658 cv
205.29 66.3779 205.068 66.2715 204.892 66.1465 cv
204.716 66.0215 204.628 65.8428 204.628 65.6074 cv
204.628 65.4609 204.665 65.3369 204.738 65.2334 cv
204.811 65.1309 204.907 65.0488 205.024 64.9854 cv
205.141 64.9238 205.266 64.8779 205.398 64.8486 cv
205.53 64.8193 205.658 64.8047 205.783 64.8047 cv
205.996 64.8047 206.221 64.8467 206.46 64.9307 cv
206.698 65.0156 206.887 65.1455 207.026 65.3223 cv
208.203 64.0352 li
cp
0 0 0 .9 cmyk
f
58.8975 86.6035 mo
76.8228 86.6035 91.3535 72.0732 91.3535 54.1479 cv
91.3535 36.2217 76.8228 21.6909 58.8975 21.6909 cv
40.9727 21.6909 26.4414 36.2217 26.4414 54.1479 cv
26.4414 72.0732 40.9727 86.6035 58.8975 86.6035 cv
0 .69 1 .04 cmyk
f
59.6709 53.3608 mo
59.6709 53.3608 63.1929 46.6738 64.3657 41.1519 cv
64.3657 41.1519 65.1328 37.23 64.1108 33.3921 cv
64.1108 33.3921 63.3838 30.1621 61.0859 28.8579 cv
60.9839 28.7949 li
58.7378 27.417 56.5439 28.8369 56.5439 28.8369 cv
54.2466 30.1411 53.481 33.3799 53.481 33.3799 cv
52.459 37.2178 53.2256 41.1392 53.2256 41.1392 cv
54.3989 46.6611 57.9209 53.3481 57.9209 53.3481 cv
/0 
<<
/Name (PANTONE 173 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .690002 1 .0399933 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.9482 53.2163 mo
57.9482 53.2163 51.2612 49.6943 45.7393 48.521 cv
45.7393 48.521 41.8169 47.7544 37.979 48.7764 cv
37.979 48.7764 34.749 49.5034 33.4453 51.8013 cv
33.3823 51.9033 li
32.0039 54.1494 33.4243 56.3428 33.4243 56.3428 cv
34.728 58.6406 37.9673 59.4063 37.9673 59.4063 cv
41.8052 60.4277 45.7261 59.6611 45.7261 59.6611 cv
51.248 58.4883 57.9351 54.9658 57.9351 54.9658 cv
f
57.9209 54.834 mo
57.9209 54.834 54.3989 61.5215 53.2261 67.043 cv
53.2261 67.043 52.459 70.9648 53.481 74.8027 cv
53.481 74.8027 54.208 78.0332 56.5059 79.3369 cv
56.6079 79.4004 li
58.854 80.7783 61.0483 79.3584 61.0483 79.3584 cv
63.3452 78.0537 64.1113 74.8154 64.1113 74.8154 cv
65.1333 70.9775 64.3662 67.0557 64.3662 67.0557 cv
63.1929 61.5342 59.6709 54.8467 59.6709 54.8467 cv
f
59.5791 54.9658 mo
59.5791 54.9658 66.2661 58.4883 71.7881 59.6611 cv
71.7881 59.6611 75.71 60.4277 79.5483 59.4063 cv
79.5483 59.4063 82.7783 58.6787 84.082 56.3809 cv
84.145 56.2793 li
85.5234 54.0327 84.103 51.8389 84.103 51.8389 cv
82.7993 49.542 79.5601 48.7759 79.5601 48.7759 cv
75.7222 47.7539 71.8013 48.521 71.8013 48.521 cv
66.2793 49.6938 59.5923 53.2158 59.5923 53.2158 cv
f
grestore
57.8921 54.9141 mo
59.6602 54.9141 li
59.6602 53.2671 li
57.8921 53.2671 li
57.8921 54.9141 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
gsave
0 108 mo
234 108 li
234 0 li
0 0 li
0 108 li
cp
clp
60.5171 19.9658 mo
60.6851 19.9766 60.833 19.9248 60.9609 19.8105 cv
61.0889 19.6968 61.1582 19.5537 61.1689 19.3818 cv
61.1802 19.2109 61.1299 19.0605 61.019 18.9336 cv
60.9082 18.8057 60.7671 18.7368 60.5962 18.7256 cv
60.4248 18.7148 60.2749 18.7656 60.146 18.8779 cv
60.0181 18.9907 59.9482 19.1328 59.938 19.3037 cv
59.9268 19.4756 59.9771 19.6265 60.0898 19.7559 cv
60.2021 19.8848 60.3452 19.9546 60.5171 19.9658 cv
63.1582 20.1919 mo
63.3252 20.2148 63.4761 20.1748 63.6118 20.0708 cv
63.748 19.9668 63.8281 19.8286 63.8521 19.6577 cv
63.876 19.4888 63.8369 19.3359 63.7358 19.1997 cv
63.6348 19.0649 63.5 18.9849 63.3301 18.9609 cv
63.1602 18.9365 63.0068 18.9766 62.8701 19.0786 cv
62.7339 19.1816 62.6538 19.3179 62.6299 19.4868 cv
62.606 19.6577 62.645 19.8125 62.748 19.9497 cv
62.8501 20.0869 62.9868 20.1675 63.1582 20.1919 cv
65.7729 20.6206 mo
65.937 20.6567 66.0908 20.6279 66.2349 20.5347 cv
66.3779 20.4409 66.4678 20.3096 66.5049 20.1416 cv
66.542 19.9736 66.5151 19.8188 66.4238 19.6758 cv
66.333 19.5327 66.2041 19.4429 66.0371 19.4067 cv
65.8691 19.3706 65.7139 19.3975 65.5698 19.4897 cv
65.4258 19.5815 65.3359 19.7119 65.2988 19.8789 cv
65.2632 20.0479 65.29 20.2046 65.3818 20.3486 cv
65.4731 20.4937 65.604 20.5835 65.7729 20.6206 cv
68.3462 21.2529 mo
68.5068 21.3008 68.6631 21.2837 68.813 21.2007 cv
68.9629 21.1187 69.063 20.9946 69.1118 20.8286 cv
69.1611 20.6646 69.145 20.5078 69.0659 20.3589 cv
68.9858 20.2095 68.8638 20.1108 68.7002 20.0615 cv
68.5361 20.0127 68.3779 20.0288 68.228 20.1099 cv
68.0781 20.1909 67.978 20.3125 67.9292 20.4766 cv
67.8799 20.6426 67.896 20.8008 67.9761 20.9517 cv
68.0571 21.1025 68.1802 21.2026 68.3462 21.2529 cv
70.8608 22.0815 mo
71.0181 22.1416 71.1748 22.1367 71.3311 22.0659 cv
71.4868 21.9946 71.5952 21.8779 71.6572 21.7168 cv
71.7178 21.5566 71.7139 21.3989 71.645 21.2437 cv
71.5771 21.0898 71.4629 20.9819 71.3032 20.9209 cv
71.1421 20.8599 70.9839 20.8638 70.8281 20.9336 cv
70.6719 21.0029 70.564 21.1177 70.5029 21.2778 cv
70.4419 21.4399 70.4458 21.5986 70.5151 21.7549 cv
70.584 21.9116 70.6992 22.0205 70.8608 22.0815 cv
73.3271 23.1025 mo
73.478 23.1777 73.6338 23.1875 73.7959 23.1328 cv
73.958 23.0767 74.0771 22.9717 74.1538 22.8169 cv
74.231 22.6636 74.2422 22.5068 74.189 22.3457 cv
74.1362 22.1846 74.0332 22.0669 73.8799 21.9907 cv
73.7261 21.9136 73.5688 21.9028 73.4072 21.9565 cv
73.2451 22.0107 73.125 22.1147 73.0488 22.2676 cv
72.9722 22.4229 72.9609 22.5806 73.0142 22.7437 cv
73.0679 22.9067 73.1719 23.0259 73.3271 23.1025 cv
75.6802 24.3169 mo
75.8262 24.4019 75.981 24.4238 76.146 24.3799 cv
76.312 24.3359 76.439 24.2397 76.5269 24.0918 cv
76.6138 23.9438 76.6372 23.7876 76.5962 23.6235 cv
76.5552 23.4595 76.46 23.3335 76.313 23.2466 cv
76.165 23.1597 76.0088 23.1367 75.8428 23.1787 cv
75.6782 23.2207 75.5518 23.3159 75.4639 23.4639 cv
75.376 23.6118 75.353 23.7695 75.395 23.9355 cv
75.437 24.1016 75.5322 24.2285 75.6802 24.3169 cv
77.9331 25.7075 mo
78.0718 25.8037 78.2251 25.8359 78.3931 25.8047 cv
78.561 25.7725 78.6948 25.6855 78.793 25.5439 cv
78.8911 25.4038 78.9248 25.2495 78.896 25.0825 cv
78.8672 24.9155 78.7822 24.7837 78.6411 24.6865 cv
78.5 24.5889 78.3462 24.5547 78.1782 24.5845 cv
78.0098 24.6147 77.877 24.7007 77.7788 24.8408 cv
77.6812 24.9829 77.646 25.1387 77.6758 25.3066 cv
77.7051 25.4756 77.791 25.6089 77.9331 25.7075 cv
80.0718 27.2676 mo
80.2031 27.3726 80.354 27.4165 80.5239 27.3965 cv
80.6938 27.3779 80.833 27.3008 80.9409 27.1655 cv
81.0488 27.0327 81.0938 26.8818 81.0771 26.7139 cv
81.0601 26.5449 80.9839 26.4067 80.8511 26.2998 cv
80.7178 26.1929 80.5659 26.1475 80.396 26.1646 cv
80.2261 26.1826 80.0879 26.2588 79.98 26.3916 cv
79.8721 26.5269 79.8262 26.6787 79.8438 26.8496 cv
79.8608 27.0195 79.937 27.1587 80.0718 27.2676 cv
82.084 28.9868 mo
82.207 29.1006 82.355 29.1548 82.5259 29.1475 cv
82.6968 29.1406 82.8408 29.0737 82.959 28.9478 cv
83.0762 28.8218 83.1318 28.6748 83.126 28.5059 cv
83.1211 28.3369 83.0562 28.1938 82.9312 28.0767 cv
82.8052 27.9595 82.6572 27.9048 82.4868 27.9097 cv
82.3159 27.9155 82.1719 27.9819 82.0562 28.1069 cv
81.938 28.2329 81.8818 28.3818 81.8872 28.5527 cv
81.8921 28.7236 81.958 28.8687 82.084 28.9868 cv
83.979 30.8628 mo
84.0908 30.9888 84.2319 31.0557 84.4028 31.0659 cv
84.5742 31.0747 84.7241 31.0215 84.854 30.9067 cv
84.9819 30.7939 85.0508 30.6519 85.063 30.4829 cv
85.0742 30.3149 85.022 30.1655 84.9092 30.0376 cv
84.7949 29.9097 84.6528 29.8398 84.4819 29.8296 cv
84.312 29.8188 84.1631 29.8706 84.0352 29.9839 cv
83.9048 30.0986 83.835 30.2417 83.8242 30.4126 cv
83.813 30.5825 83.8638 30.7329 83.979 30.8628 cv
85.7021 32.8716 mo
85.8042 33.0059 85.9409 33.0835 86.1108 33.1045 cv
86.2798 33.1265 86.4341 33.0845 86.5708 32.9795 cv
86.707 32.8745 86.7871 32.7397 86.8101 32.5718 cv
86.833 32.4038 86.792 32.2515 86.688 32.1157 cv
86.584 31.9795 86.4468 31.9009 86.2778 31.8779 cv
86.1089 31.8545 85.9561 31.8955 85.8198 31.9995 cv
85.6831 32.1045 85.603 32.2427 85.5791 32.4116 cv
85.5562 32.5815 85.5972 32.7349 85.7021 32.8716 cv
87.2661 35.0078 mo
87.3579 35.1489 87.4888 35.2358 87.6572 35.2695 cv
87.8242 35.3027 87.981 35.2725 88.125 35.1777 cv
88.2681 35.0835 88.3569 34.9536 88.3921 34.7876 cv
88.4268 34.6226 88.3979 34.4678 88.3042 34.3247 cv
88.209 34.1816 88.0791 34.0928 87.9121 34.0576 cv
87.7451 34.0225 87.5889 34.0527 87.4458 34.1465 cv
87.3018 34.2417 87.2119 34.3726 87.1768 34.5405 cv
87.1411 34.7075 87.1709 34.8638 87.2661 35.0078 cv
88.6611 37.2578 mo
88.7432 37.4048 88.8672 37.5015 89.0322 37.5469 cv
89.1968 37.5928 89.355 37.5737 89.5059 37.4888 cv
89.6548 37.4058 89.7529 37.2827 89.7998 37.1196 cv
89.8481 36.9575 89.8291 36.8008 89.7461 36.6519 cv
89.6621 36.5015 89.5381 36.4038 89.374 36.3569 cv
89.21 36.3096 89.0532 36.3286 88.9028 36.4116 cv
88.7529 36.4956 88.6528 36.6206 88.606 36.7847 cv
88.5581 36.9497 88.5771 37.1069 88.6611 37.2578 cv
89.8979 39.6216 mo
89.9658 39.7769 90.0791 39.8848 90.2388 39.9458 cv
90.3989 40.0078 90.5581 40.0039 90.7158 39.9346 cv
90.873 39.8657 90.9829 39.7529 91.0459 39.5957 cv
91.1079 39.4385 91.105 39.2808 91.0371 39.1235 cv
90.9678 38.9668 90.854 38.8579 90.6948 38.7949 cv
90.5371 38.7319 90.3789 38.7349 90.2222 38.8037 cv
90.063 38.8726 89.9531 38.9868 89.8892 39.1455 cv
89.8262 39.3057 89.8291 39.4639 89.8979 39.6216 cv
90.9258 42.0635 mo
90.9819 42.2227 91.0879 42.3389 91.2422 42.4116 cv
91.397 42.4849 91.5562 42.4927 91.7188 42.4346 cv
91.8809 42.3779 91.999 42.2739 92.0732 42.1216 cv
92.147 41.9697 92.1548 41.8125 92.0981 41.6509 cv
92.041 41.4888 91.936 41.3716 91.7822 41.2969 cv
91.6279 41.2227 91.4712 41.2148 91.3091 41.2705 cv
91.146 41.3286 91.0269 41.4346 90.9521 41.5879 cv
90.8779 41.7417 90.8691 41.9009 90.9258 42.0635 cv
91.7622 44.5776 mo
91.8062 44.7407 91.9028 44.8638 92.0518 44.9478 cv
92.2012 45.0327 92.3579 45.0518 92.5249 45.0068 cv
92.6909 44.9629 92.8159 44.8667 92.9009 44.7207 cv
92.9858 44.5747 93.0059 44.4185 92.9609 44.2529 cv
92.917 44.0879 92.8198 43.9629 92.6729 43.8765 cv
92.5249 43.7915 92.3682 43.7705 92.2031 43.8159 cv
92.0361 43.8608 91.9102 43.9575 91.8242 44.1055 cv
91.7368 44.2539 91.7168 44.4106 91.7622 44.5776 cv
92.3999 47.1499 mo
92.4321 47.3149 92.519 47.4458 92.6611 47.5405 cv
92.8032 47.6357 92.959 47.6675 93.1289 47.6348 cv
93.2969 47.6025 93.4292 47.5166 93.5249 47.3765 cv
93.6211 47.2378 93.6528 47.0835 93.6211 46.9155 cv
93.5879 46.7476 93.502 46.6147 93.3608 46.5186 cv
93.2202 46.4229 93.0649 46.3906 92.897 46.4229 cv
92.7271 46.4556 92.5938 46.5415 92.4971 46.6826 cv
92.3999 46.8247 92.3682 46.9795 92.3999 47.1499 cv
92.8369 49.7627 mo
92.856 49.9307 92.9331 50.0669 93.0679 50.1729 cv
93.2021 50.2788 93.356 50.3218 93.5269 50.3018 cv
93.6968 50.2827 93.8359 50.2065 93.9419 50.0747 cv
94.0479 49.9438 94.0908 49.7915 94.0718 49.6216 cv
94.0518 49.4517 93.9761 49.3135 93.8418 49.2065 cv
93.709 49.0996 93.5571 49.0566 93.3872 49.0757 cv
93.2148 49.0957 93.0762 49.1719 92.9688 49.3057 cv
92.8608 49.4385 92.8169 49.5918 92.8369 49.7627 cv
93.0708 52.4028 mo
93.0781 52.5718 93.144 52.7139 93.27 52.8286 cv
93.396 52.9448 93.5459 52.9995 93.7188 52.9927 cv
93.8901 52.9858 94.0332 52.9219 94.1489 52.7979 cv
94.2651 52.6748 94.3188 52.5269 94.313 52.3555 cv
94.3062 52.1846 94.2412 52.0405 94.1162 51.9248 cv
93.9912 51.8076 93.8428 51.7529 93.6719 51.7598 cv
93.499 51.7656 93.354 51.8315 93.2368 51.9565 cv
93.1201 52.0815 93.0649 52.2305 93.0708 52.4028 cv
93.103 55.0527 mo
93.0972 55.2217 93.1519 55.3682 93.269 55.4932 cv
93.3862 55.6182 93.5308 55.6836 93.7041 55.6904 cv
93.875 55.6963 94.0229 55.6426 94.1479 55.5283 cv
94.2729 55.415 94.3379 55.2715 94.3452 55.1006 cv
94.3511 54.9287 94.2969 54.7803 94.1812 54.6543 cv
94.0649 54.5293 93.9219 54.4639 93.751 54.4565 cv
93.5781 54.4507 93.4292 54.5049 93.3018 54.6211 cv
93.1758 54.7363 93.1099 54.8809 93.103 55.0527 cv
92.9321 57.6973 mo
92.9131 57.8652 92.957 58.0156 93.0649 58.1484 cv
93.1719 58.2822 93.312 58.3584 93.4829 58.3789 cv
93.6528 58.3975 93.8052 58.3555 93.938 58.251 cv
94.0708 58.1465 94.1479 58.0098 94.167 57.8389 cv
94.186 57.6689 94.1431 57.5166 94.0371 57.3828 cv
93.9321 57.249 93.7939 57.1719 93.623 57.1523 cv
93.4521 57.1328 93.2988 57.1758 93.1641 57.2813 cv
93.0288 57.3877 92.9521 57.5264 92.9321 57.6973 cv
92.5581 60.3213 mo
92.5259 60.4863 92.5591 60.6396 92.6558 60.7803 cv
92.7529 60.9229 92.8862 61.0088 93.0562 61.042 cv
93.2241 61.0732 93.3789 61.043 93.519 60.9482 cv
93.6602 60.8545 93.7461 60.7236 93.7788 60.5547 cv
93.811 60.3867 93.7788 60.2314 93.6841 60.0908 cv
93.5879 59.9482 93.4561 59.8613 93.2881 59.8301 cv
93.1191 59.7969 92.9629 59.8291 92.8198 59.9238 cv
92.6782 60.0186 92.5908 60.1514 92.5581 60.3213 cv
91.981 62.9063 mo
91.937 63.0693 91.958 63.2246 92.0449 63.373 cv
92.1309 63.5205 92.2568 63.6182 92.4238 63.6631 cv
92.5889 63.708 92.7461 63.6875 92.8931 63.6045 cv
93.04 63.5215 93.1362 63.3965 93.1812 63.2314 cv
93.2261 63.0664 93.2061 62.9102 93.1211 62.7607 cv
93.0371 62.6123 92.9121 62.5166 92.7461 62.4717 cv
92.5791 62.4268 92.4219 62.4453 92.2729 62.5303 cv
92.124 62.6143 92.0259 62.7402 91.981 62.9063 cv
91.21 65.4629 mo
91.1499 65.6211 91.1548 65.7764 91.2261 65.9326 cv
91.2969 66.0889 91.4141 66.1963 91.5752 66.2588 cv
91.7349 66.3193 91.8931 66.3154 92.0479 66.248 cv
92.2021 66.1787 92.3101 66.0645 92.3711 65.9043 cv
92.4321 65.7451 92.4282 65.5859 92.3579 65.4307 cv
92.2891 65.2744 92.1738 65.166 92.0142 65.1045 cv
91.8521 65.0439 91.6929 65.0479 91.5371 65.1172 cv
91.3799 65.1855 91.271 65.3018 91.21 65.4629 cv
90.2339 67.9258 mo
90.1631 68.0791 90.1572 68.2344 90.2158 68.3955 cv
90.2759 68.5557 90.3838 68.6729 90.54 68.7461 cv
90.6948 68.8184 90.853 68.8271 91.0122 68.7695 cv
91.1719 68.7129 91.2881 68.6064 91.3599 68.4521 cv
91.4321 68.2959 91.4399 68.1377 91.3818 67.9775 cv
91.3242 67.8164 91.2178 67.7012 91.062 67.6279 cv
90.9058 67.5547 90.7471 67.5469 90.5859 67.6045 cv
90.4238 67.6621 90.3071 67.7686 90.2339 67.9258 cv
89.0708 70.3047 mo
88.9888 70.4521 88.9712 70.6074 89.019 70.7715 cv
89.0659 70.9365 89.165 71.0605 89.3159 71.1445 cv
89.4658 71.2285 89.6221 71.248 89.7852 71.2031 cv
89.9482 71.1572 90.0718 71.0605 90.1548 70.9111 cv
90.2388 70.7607 90.2578 70.6035 90.2119 70.4395 cv
90.166 70.2754 90.0679 70.1514 89.918 70.0674 cv
89.7681 69.9834 89.6099 69.9639 89.4448 70.0098 cv
89.2798 70.0557 89.1548 70.1533 89.0708 70.3047 cv
87.7271 72.5859 mo
87.6348 72.7266 87.606 72.8809 87.6421 73.0479 cv
87.6768 73.2158 87.7671 73.3467 87.9121 73.4414 cv
88.0552 73.5361 88.209 73.5664 88.375 73.5342 cv
88.541 73.501 88.6709 73.4121 88.7651 73.2686 cv
88.8599 73.126 88.8901 72.9707 88.856 72.8037 cv
88.8218 72.6357 88.7329 72.5059 88.5898 72.4111 cv
88.4458 72.3154 88.29 72.2861 88.1221 72.3184 cv
87.9541 72.3525 87.8218 72.4414 87.7271 72.5859 cv
86.2129 74.7568 mo
86.1099 74.8906 86.0708 75.042 86.0938 75.2119 cv
86.1182 75.3818 86.1982 75.5186 86.335 75.624 cv
86.4712 75.7275 86.623 75.7695 86.791 75.749 cv
86.959 75.7275 87.0952 75.6484 87.1992 75.5127 cv
87.3032 75.377 87.3438 75.2236 87.3232 75.0547 cv
87.3008 74.8857 87.2222 74.749 87.0859 74.6445 cv
86.9492 74.54 86.7949 74.498 86.625 74.5186 cv
86.4551 74.541 86.3179 74.6201 86.2129 74.7568 cv
84.5308 76.8271 mo
84.417 76.9492 84.3628 77.0967 84.3701 77.2686 cv
84.377 77.4395 84.4438 77.584 84.5698 77.7021 cv
84.6958 77.8174 84.8428 77.874 85.0122 77.8691 cv
85.1812 77.8633 85.3242 77.7988 85.4409 77.6738 cv
85.5581 77.5479 85.6128 77.3994 85.6079 77.2295 cv
85.6021 77.0586 85.5361 76.915 85.4111 76.7979 cv
85.2852 76.6807 85.1362 76.624 84.9648 76.6299 cv
84.7939 76.6348 84.6489 76.6992 84.5308 76.8271 cv
82.6992 78.7363 mo
82.5752 78.8516 82.5112 78.9951 82.5059 79.166 cv
82.501 79.3369 82.5571 79.4854 82.6748 79.6113 cv
82.792 79.7373 82.9351 79.8037 83.104 79.8105 cv
83.2729 79.8174 83.4199 79.7627 83.5449 79.6465 cv
83.6709 79.5293 83.7368 79.3857 83.7432 79.2158 cv
83.75 79.0449 83.6948 78.8965 83.5781 78.7715 cv
83.4609 78.6445 83.3159 78.5781 83.145 78.5703 cv
82.9741 78.5635 82.8252 78.6191 82.6992 78.7363 cv
80.7261 80.501 mo
80.5938 80.6064 80.52 80.7451 80.5029 80.916 cv
80.4849 81.0859 80.5308 81.2373 80.6392 81.373 cv
80.7471 81.5059 80.8838 81.583 81.0532 81.6016 cv
81.2212 81.6211 81.3721 81.5771 81.5049 81.4688 cv
81.6382 81.3613 81.7148 81.2227 81.7329 81.0527 cv
81.752 80.8838 81.708 80.7314 81.6001 80.5986 cv
81.4922 80.4639 81.353 80.3867 81.1831 80.3682 cv
81.0122 80.3486 80.8599 80.3926 80.7261 80.501 cv
78.623 82.1094 mo
78.4849 82.2061 78.4009 82.3379 78.3711 82.5068 cv
78.3418 82.6748 78.376 82.8311 78.4741 82.9727 cv
78.5718 83.1123 78.7041 83.1982 78.8701 83.2295 cv
79.0371 83.2617 79.1899 83.2275 79.3311 83.1309 cv
79.4722 83.0322 79.5581 82.8994 79.5889 82.7324 cv
79.6201 82.5645 79.5859 82.4102 79.4888 82.2686 cv
79.3901 82.127 79.2568 82.041 79.0889 82.0088 cv
78.9199 81.9775 78.7651 82.0107 78.623 82.1094 cv
76.3931 83.5723 mo
76.2461 83.6543 76.1489 83.7783 76.104 83.9434 cv
76.0581 84.1084 76.0771 84.2666 76.1621 84.418 cv
76.2451 84.5664 76.3682 84.665 76.5308 84.7119 cv
76.6929 84.7588 76.8491 84.7402 76.999 84.6572 cv
77.1489 84.5732 77.2471 84.4492 77.2939 84.2861 cv
77.3408 84.1221 77.3218 83.9648 77.2388 83.8145 cv
77.1538 83.665 77.0298 83.5645 76.8662 83.5176 cv
76.7012 83.4697 76.543 83.4883 76.3931 83.5723 cv
74.0649 84.8359 mo
73.9121 84.9063 73.8071 85.0225 73.749 85.1846 cv
73.6919 85.3457 73.7002 85.5049 73.7729 85.6611 cv
73.8452 85.8164 73.9609 85.9238 74.1191 85.9814 cv
74.2778 86.041 74.4351 86.0342 74.5898 85.9619 cv
74.7461 85.8887 74.853 85.7725 74.9111 85.6123 cv
74.9702 85.4521 74.9629 85.2939 74.8911 85.1387 cv
74.8179 84.9824 74.7012 84.875 74.54 84.8145 cv
74.3799 84.7559 74.2212 84.7627 74.0649 84.8359 cv
71.646 85.915 mo
71.4878 85.9746 71.375 86.083 71.3062 86.2393 cv
71.2368 86.3955 71.2329 86.5547 71.2939 86.7168 cv
71.355 86.877 71.4619 86.9922 71.6162 87.0625 cv
71.77 87.1328 71.9268 87.1367 72.0869 87.0771 cv
72.248 87.0156 72.3628 86.9063 72.4331 86.752 cv
72.5039 86.5957 72.5078 86.4385 72.4482 86.2773 cv
72.3862 86.1172 72.2778 86.001 72.1221 85.9297 cv
71.9658 85.8584 71.8071 85.8535 71.646 85.915 cv
69.1499 86.8037 mo
68.9888 86.8516 68.8682 86.9512 68.7871 87.1016 cv
68.707 87.2529 68.6909 87.4121 68.7402 87.5771 cv
68.7891 87.7422 68.8882 87.8633 69.0361 87.9453 cv
69.1841 88.0264 69.3398 88.0439 69.5049 87.9951 cv
69.6689 87.9453 69.792 87.8467 69.874 87.6963 cv
69.9551 87.5469 69.9722 87.3896 69.9229 87.2256 cv
69.874 87.0596 69.7739 86.9355 69.624 86.8535 cv
69.4741 86.7705 69.3159 86.7549 69.1499 86.8037 cv
66.5928 87.4961 mo
66.4282 87.5313 66.2998 87.6221 66.208 87.7666 cv
66.1172 87.9111 66.0889 88.0674 66.126 88.2363 cv
66.1631 88.4033 66.252 88.5342 66.3931 88.626 cv
66.5352 88.7188 66.6899 88.7471 66.8569 88.71 cv
67.0249 88.6738 67.1548 88.584 67.248 88.4395 cv
67.3398 88.2969 67.3682 88.1416 67.332 87.9736 cv
67.2949 87.8047 67.2051 87.6738 67.061 87.5811 cv
66.918 87.4873 66.7622 87.459 66.5928 87.4961 cv
63.9888 87.9873 mo
63.8218 88.0107 63.688 88.0908 63.585 88.2285 cv
63.4829 88.3652 63.4438 88.5195 63.4678 88.6904 cv
63.4922 88.8604 63.5708 88.9971 63.7051 89.0996 cv
63.8398 89.2031 63.9922 89.2422 64.1611 89.2178 cv
64.3311 89.1943 64.4678 89.1143 64.5708 88.9785 cv
64.6738 88.8428 64.7139 88.6895 64.6899 88.5195 cv
64.666 88.3486 64.5859 88.2119 64.4502 88.1074 cv
64.314 88.0039 64.1602 87.9639 63.9888 87.9873 cv
61.355 88.2764 mo
61.187 88.2871 61.0469 88.3564 60.9341 88.4854 cv
60.8218 88.6152 60.771 88.7656 60.7822 88.9385 cv
60.793 89.1094 60.8608 89.252 60.9878 89.3633 cv
61.1138 89.4766 61.2632 89.5273 61.4341 89.5166 cv
61.605 89.5059 61.7471 89.4365 61.8599 89.3086 cv
61.9731 89.1807 62.0239 89.0313 62.0142 88.8604 cv
62.0029 88.6875 61.9331 88.5449 61.8052 88.4307 cv
61.6782 88.3164 61.5269 88.2656 61.355 88.2764 cv
58.7061 88.3623 mo
58.5381 88.3604 58.3931 88.4199 58.271 88.54 cv
58.1489 88.6602 58.0869 88.8066 58.085 88.9795 cv
58.082 89.1504 58.1401 89.2979 58.2568 89.4189 cv
58.375 89.541 58.519 89.6025 58.6899 89.6045 cv
58.8618 89.6074 59.0088 89.5488 59.1309 89.4307 cv
59.2539 89.3115 59.3159 89.167 59.3179 88.9951 cv
59.3208 88.8223 59.2622 88.6748 59.144 88.5508 cv
59.0249 88.4277 58.8789 88.3643 58.7061 88.3623 cv
56.0591 88.2471 mo
55.8911 88.2314 55.7412 88.2793 55.6108 88.3906 cv
55.48 88.502 55.4072 88.6426 55.3921 88.8145 cv
55.377 88.9854 55.4229 89.1357 55.5308 89.2666 cv
55.6392 89.3965 55.7778 89.4697 55.9492 89.4844 cv
56.1191 89.5 56.27 89.4531 56.4019 89.3438 cv
56.5332 89.2344 56.606 89.0947 56.6211 88.9238 cv
56.6362 88.752 56.5889 88.5996 56.48 88.4678 cv
56.3711 88.3359 56.231 88.2627 56.0591 88.2471 cv
53.4282 87.9277 mo
53.2622 87.9004 53.1089 87.9365 52.9712 88.0381 cv
52.832 88.1377 52.749 88.2725 52.7202 88.4434 cv
52.6919 88.6123 52.7271 88.7666 52.8252 88.9043 cv
52.9219 89.043 53.0562 89.126 53.2251 89.1533 cv
53.394 89.1816 53.5479 89.1465 53.687 89.0479 cv
53.8262 88.9482 53.9102 88.8145 53.938 88.6455 cv
53.9658 88.4746 53.9312 88.3193 53.832 88.1797 cv
53.7329 88.04 53.5981 87.9561 53.4282 87.9277 cv
50.8081 87.4131 mo
50.645 87.3691 50.4902 87.3896 50.3418 87.4756 cv
50.1938 87.5615 50.0972 87.6885 50.0518 87.8545 cv
50.0068 88.0205 50.0259 88.1768 50.1099 88.3232 cv
50.1929 88.4707 50.3179 88.5674 50.4829 88.6113 cv
50.6479 88.6563 50.8052 88.6367 50.9541 88.5527 cv
51.1021 88.4678 51.1982 88.3428 51.2432 88.1777 cv
51.2881 88.0107 51.269 87.8525 51.1841 87.7041 cv
51.1001 87.5547 50.9741 87.458 50.8081 87.4131 cv
48.2598 86.6855 mo
48.1011 86.6299 47.9438 86.6387 47.79 86.7139 cv
47.6362 86.7891 47.5308 86.9072 47.4731 87.0703 cv
47.416 87.2324 47.4238 87.3896 47.4961 87.543 cv
47.5679 87.6953 47.6851 87.8008 47.8472 87.8574 cv
48.0078 87.915 48.166 87.9063 48.3208 87.833 cv
48.4751 87.7598 48.5801 87.6426 48.6372 87.4805 cv
48.6948 87.3174 48.687 87.1592 48.6138 87.0039 cv
48.541 86.8486 48.4229 86.7432 48.2598 86.6855 cv
45.7769 85.7627 mo
45.6221 85.6943 45.4658 85.6924 45.3071 85.7568 cv
45.1479 85.8193 45.0332 85.9307 44.9639 86.0889 cv
44.895 86.2461 44.8911 86.4023 44.9521 86.5605 cv
45.0132 86.7188 45.1221 86.833 45.2788 86.9004 cv
45.436 86.9697 45.5942 86.9727 45.7529 86.9121 cv
45.9121 86.8496 46.0259 86.7402 46.0952 86.584 cv
46.1641 86.4248 46.168 86.2656 46.106 86.1064 cv
46.0449 85.9463 45.9351 85.832 45.7769 85.7627 cv
43.374 84.6494 mo
43.2251 84.5713 43.0688 84.5576 42.9048 84.6094 cv
42.7422 84.6611 42.6201 84.7627 42.5391 84.916 cv
42.459 85.0674 42.4438 85.2236 42.4932 85.3857 cv
42.542 85.5479 42.6421 85.6689 42.7939 85.749 cv
42.9448 85.8291 43.103 85.8438 43.2661 85.7939 cv
43.4292 85.7441 43.5508 85.6426 43.6309 85.4922 cv
43.7119 85.3389 43.7271 85.1807 43.6768 85.0166 cv
43.6279 84.8525 43.5269 84.7305 43.374 84.6494 cv
41.0649 83.3545 mo
40.9219 83.2656 40.7671 83.2402 40.6001 83.2803 cv
40.4341 83.3193 40.3052 83.4131 40.2129 83.5596 cv
40.1221 83.7051 40.0962 83.8604 40.1328 84.0254 cv
40.1699 84.1904 40.2612 84.3184 40.4072 84.4092 cv
40.5518 84.5 40.708 84.5254 40.874 84.4873 cv
41.041 84.4492 41.1689 84.3584 41.2598 84.2129 cv
41.3511 84.0664 41.3779 83.9102 41.3408 83.7432 cv
41.3032 83.5762 41.2109 83.4463 41.0649 83.3545 cv
38.8389 81.8848 mo
38.7051 81.7822 38.5532 81.7432 38.3838 81.7656 cv
38.2139 81.79 38.0771 81.8701 37.9722 82.0068 cv
37.8682 82.1426 37.8262 82.2949 37.8472 82.4629 cv
37.8682 82.6309 37.9468 82.7666 38.083 82.8711 cv
38.2192 82.9746 38.3711 83.0166 38.541 82.9951 cv
38.71 82.9727 38.8472 82.8936 38.9512 82.7578 cv
39.0562 82.6211 39.0981 82.4668 39.0771 82.2979 cv
39.0552 82.1279 38.9761 81.9893 38.8389 81.8848 cv
36.7588 80.2471 mo
36.6328 80.1348 36.4849 80.085 36.314 80.0957 cv
36.1431 80.1064 36 80.1777 35.8848 80.3066 cv
35.772 80.4346 35.7192 80.584 35.729 80.752 cv
35.7378 80.9209 35.8062 81.0625 35.9341 81.1768 cv
36.063 81.29 36.2119 81.3418 36.3818 81.333 cv
36.5532 81.3223 36.6948 81.2539 36.8091 81.126 cv
36.9229 80.9971 36.9761 80.8467 36.9668 80.6758 cv
36.958 80.5049 36.8882 80.3613 36.7588 80.2471 cv
34.811 78.4551 mo
34.6929 78.334 34.5488 78.2734 34.3779 78.2725 cv
34.2061 78.2715 34.0591 78.3311 33.9351 78.4521 cv
33.813 78.5713 33.75 78.7158 33.7471 78.8848 cv
33.7441 79.0547 33.8018 79.1992 33.9219 79.3223 cv
34.042 79.4453 34.187 79.5078 34.3579 79.5107 cv
34.5278 79.5127 34.6748 79.4551 34.7979 79.335 cv
34.9209 79.2139 34.9849 79.0674 34.9878 78.8965 cv
34.9912 78.7256 34.9321 78.5791 34.811 78.4551 cv
33.0059 76.5186 mo
32.897 76.3906 32.7568 76.3193 32.5869 76.3057 cv
32.416 76.293 32.2651 76.3418 32.1328 76.4541 cv
32.002 76.5635 31.9292 76.7041 31.9141 76.8721 cv
31.8989 77.041 31.9458 77.1904 32.0571 77.3213 cv
32.168 77.4521 32.3081 77.5244 32.478 77.54 cv
32.6479 77.5547 32.7988 77.5068 32.9302 77.3955 cv
33.061 77.2842 33.1348 77.1426 33.1499 76.9727 cv
33.166 76.8018 33.1172 76.6504 33.0059 76.5186 cv
31.354 74.4512 mo
31.2549 74.3145 31.1211 74.2334 30.9512 74.209 cv
30.7822 74.1826 30.627 74.2207 30.4878 74.3223 cv
30.3491 74.4238 30.2671 74.5576 30.2402 74.7246 cv
30.2119 74.8916 30.249 75.0449 30.3501 75.1826 cv
30.4512 75.3213 30.5859 75.4033 30.7549 75.4307 cv
30.9229 75.458 31.0771 75.4209 31.2148 75.3193 cv
31.355 75.2178 31.438 75.083 31.4658 74.9141 cv
31.4932 74.7451 31.4561 74.5908 31.354 74.4512 cv
29.8472 72.251 mo
29.7612 72.1055 29.6348 72.0117 29.4692 71.9707 cv
29.3032 71.9287 29.145 71.9521 28.9971 72.04 cv
28.8491 72.127 28.7539 72.2529 28.7109 72.416 cv
28.668 72.5801 28.6899 72.7354 28.7769 72.8828 cv
28.8638 73.0293 28.9902 73.126 29.1558 73.1689 cv
29.3208 73.2119 29.4771 73.1895 29.625 73.1016 cv
29.7729 73.0137 29.8701 72.8877 29.9131 72.7217 cv
29.957 72.5557 29.9351 72.3984 29.8472 72.251 cv
28.5352 69.9492 mo
28.46 69.7988 28.3408 69.6963 28.1792 69.6426 cv
28.0161 69.5898 27.8579 69.6006 27.7031 69.6777 cv
27.5488 69.7539 27.4448 69.873 27.3901 70.0322 cv
27.3359 70.1924 27.3462 70.3496 27.4219 70.5029 cv
27.499 70.6553 27.6182 70.7607 27.7788 70.8145 cv
27.9409 70.8701 28.0991 70.8594 28.252 70.7822 cv
28.4072 70.7061 28.5122 70.5869 28.5669 70.4248 cv
28.623 70.2627 28.6118 70.1045 28.5352 69.9492 cv
27.4048 67.5547 mo
27.3408 67.3984 27.231 67.2881 27.0718 67.2227 cv
26.9141 67.1572 26.7549 67.1572 26.5952 67.2227 cv
26.436 67.2881 26.3242 67.3975 26.2568 67.5537 cv
26.1909 67.709 26.1899 67.8652 26.2549 68.0244 cv
26.3198 68.1826 26.4312 68.2959 26.5879 68.3623 cv
26.7451 68.4287 26.9028 68.4297 27.062 68.3643 cv
27.2222 68.2998 27.335 68.1885 27.4019 68.0303 cv
27.4702 67.874 27.4712 67.7148 27.4048 67.5547 cv
26.4639 65.0791 mo
26.4121 64.9189 26.3101 64.7998 26.1558 64.7227 cv
26.0039 64.6455 25.8452 64.6348 25.6812 64.6875 cv
25.5181 64.7402 25.397 64.8428 25.3188 64.9932 cv
25.2422 65.1426 25.229 65.2998 25.2822 65.4629 cv
25.335 65.626 25.438 65.7461 25.5889 65.8232 cv
25.7412 65.9014 25.8989 65.915 26.062 65.8613 cv
26.2261 65.8076 26.3472 65.7061 26.4258 65.5537 cv
26.5049 65.4014 26.5171 65.2432 26.4639 65.0791 cv
25.7178 62.5371 mo
25.6782 62.373 25.585 62.248 25.438 62.1602 cv
25.291 62.0703 25.1338 62.0479 24.9658 62.0889 cv
24.7988 62.1289 24.6719 62.2217 24.583 62.3652 cv
24.4941 62.5098 24.4702 62.665 24.5112 62.832 cv
24.5508 62.998 24.645 63.126 24.79 63.2148 cv
24.936 63.3037 25.0918 63.3281 25.2578 63.2881 cv
25.4258 63.2471 25.5552 63.1523 25.645 63.0078 cv
25.7339 62.8613 25.7588 62.7051 25.7178 62.5371 cv
25.1709 59.9443 mo
25.144 59.7773 25.0601 59.6455 24.9199 59.5469 cv
24.7808 59.4473 24.626 59.4131 24.4551 59.4404 cv
24.2861 59.4688 24.1519 59.5518 24.0532 59.6885 cv
23.9531 59.8262 23.918 59.9785 23.9458 60.1475 cv
23.9741 60.3164 24.0571 60.4512 24.1948 60.5508 cv
24.334 60.6504 24.4878 60.6865 24.6572 60.6592 cv
24.8271 60.6299 24.9629 60.5469 25.063 60.4072 cv
25.1641 60.2695 25.2002 60.1143 25.1709 59.9443 cv
24.813 57.2969 mo
24.8018 57.1289 24.7319 56.9883 24.603 56.877 cv
24.4741 56.7637 24.3232 56.7129 24.1509 56.7236 cv
23.98 56.7344 23.8379 56.8037 23.7251 56.9297 cv
23.6128 57.0557 23.562 57.2051 23.5732 57.376 cv
23.583 57.5469 23.6528 57.6885 23.7798 57.8018 cv
23.9082 57.916 24.0581 57.9668 24.229 57.9561 cv
24.4009 57.9443 24.5439 57.876 24.6582 57.748 cv
24.772 57.6201 24.8242 57.4697 24.813 57.2969 cv
24.6738 54.6494 mo
24.6758 54.4819 24.6172 54.3359 24.4971 54.2139 cv
24.376 54.0928 24.23 54.0298 24.0571 54.0278 cv
23.8862 54.0259 23.7388 54.0835 23.6172 54.2007 cv
23.4951 54.3188 23.4331 54.4629 23.4312 54.6338 cv
23.4292 54.8057 23.4868 54.9531 23.606 55.0742 cv
23.7251 55.1973 23.8701 55.2598 24.041 55.2617 cv
24.2139 55.2637 24.3618 55.2061 24.4849 55.0869 cv
24.6089 54.9688 24.6719 54.8223 24.6738 54.6494 cv
24.7368 51.9995 mo
24.752 51.8315 24.7041 51.6826 24.5928 51.5518 cv
24.4829 51.4209 24.3408 51.3477 24.1689 51.3325 cv
23.998 51.3179 23.8481 51.3638 23.7178 51.4717 cv
23.5869 51.5796 23.5142 51.7188 23.499 51.8896 cv
23.4839 52.0596 23.5308 52.2109 23.6401 52.3428 cv
23.749 52.4736 23.8892 52.5469 24.0601 52.5615 cv
24.2319 52.5767 24.3838 52.5308 24.5161 52.4209 cv
24.6479 52.3115 24.7222 52.1719 24.7368 51.9995 cv
25.0039 49.3618 mo
25.0308 49.1958 24.9951 49.0435 24.895 48.9048 cv
24.7939 48.7656 24.6592 48.6826 24.4878 48.6548 cv
24.3188 48.6265 24.166 48.6616 24.0269 48.7588 cv
23.8892 48.8569 23.8062 48.9897 23.7778 49.1587 cv
23.75 49.3276 23.7861 49.4819 23.8848 49.6216 cv
23.9829 49.7607 24.1172 49.8438 24.2871 49.8716 cv
24.457 49.8999 24.6118 49.8647 24.752 49.7656 cv
24.8921 49.6675 24.9761 49.5327 25.0039 49.3618 cv
25.4751 46.7539 mo
25.5151 46.5908 25.4902 46.4355 25.3999 46.2896 cv
25.3101 46.1436 25.1821 46.0508 25.0142 46.0098 cv
24.8472 45.9688 24.6919 45.9927 24.5459 46.0796 cv
24.4009 46.1665 24.3081 46.2925 24.2681 46.4595 cv
24.2271 46.6255 24.251 46.7827 24.3389 46.9287 cv
24.4268 47.0747 24.5552 47.1675 24.7212 47.2085 cv
24.8892 47.2495 25.0459 47.2256 25.1929 47.1377 cv
25.3398 47.0498 25.4341 46.9219 25.4751 46.7539 cv
26.1479 44.1919 mo
26.2002 44.0308 26.186 43.8745 26.1079 43.7227 cv
26.0288 43.5708 25.9072 43.4678 25.7432 43.4146 cv
25.5801 43.3618 25.4229 43.3735 25.272 43.4497 cv
25.1211 43.5259 25.019 43.6445 24.9658 43.8076 cv
24.9131 43.9707 24.9248 44.1289 25.002 44.2808 cv
25.0791 44.4326 25.1992 44.5356 25.3618 44.5889 cv
25.5259 44.6416 25.6851 44.6299 25.8379 44.5527 cv
25.9912 44.4766 26.0942 44.3555 26.1479 44.1919 cv
27.0181 41.6899 mo
27.0811 41.5337 27.0801 41.3765 27.0122 41.2197 cv
26.9448 41.0615 26.832 40.9507 26.6719 40.8848 cv
26.5132 40.8208 26.356 40.8198 26.1992 40.8848 cv
26.043 40.9497 25.9321 41.0605 25.8672 41.2197 cv
25.8018 41.3779 25.8032 41.5366 25.8691 41.6938 cv
25.9341 41.8516 26.0459 41.9629 26.2051 42.0278 cv
26.3652 42.0928 26.5239 42.0928 26.6821 42.0278 cv
26.8398 41.9619 26.9521 41.8496 27.0181 41.6899 cv
28.0791 39.2637 mo
28.1538 39.1128 28.1641 38.9556 28.1079 38.7939 cv
28.0532 38.6318 27.9482 38.5127 27.793 38.4355 cv
27.6401 38.3599 27.4829 38.3477 27.3218 38.4009 cv
27.1611 38.4536 27.043 38.5566 26.9658 38.7109 cv
26.8901 38.8638 26.8789 39.0215 26.9331 39.1836 cv
26.9868 39.3457 27.0898 39.4648 27.2441 39.5405 cv
27.3989 39.6177 27.5571 39.6299 27.7202 39.5757 cv
27.8818 39.5225 28.002 39.4175 28.0791 39.2637 cv
29.3252 36.9277 mo
29.4111 36.7817 29.4321 36.6265 29.3882 36.4619 cv
29.3452 36.2959 29.249 36.1689 29.1001 36.0806 cv
28.9521 35.9937 28.7969 35.9707 28.6318 36.0117 cv
28.4678 36.0527 28.3428 36.1475 28.2549 36.2949 cv
28.168 36.4429 28.146 36.5986 28.188 36.7646 cv
28.23 36.9297 28.3242 37.0557 28.4722 37.1436 cv
28.6211 37.2319 28.7778 37.2549 28.9438 37.2129 cv
29.1099 37.1709 29.2368 37.0757 29.3252 36.9277 cv
30.75 34.6729 mo
30.8491 34.5366 30.8848 34.3838 30.8579 34.2148 cv
30.8301 34.0459 30.7471 33.9106 30.6069 33.8086 cv
30.4692 33.7075 30.3159 33.6699 30.1489 33.6948 cv
29.981 33.7197 29.8472 33.8018 29.7461 33.9409 cv
29.645 34.0786 29.6079 34.2329 29.6338 34.4009 cv
29.6602 34.5698 29.7422 34.7046 29.8799 34.8057 cv
30.02 34.9077 30.1738 34.9458 30.3442 34.9199 cv
30.5132 34.8945 30.6479 34.8115 30.75 34.6729 cv
32.3442 32.5586 mo
32.4531 32.4307 32.5 32.2808 32.4839 32.1099 cv
32.4692 31.9399 32.396 31.7988 32.2642 31.6865 cv
32.1328 31.5767 31.9829 31.5278 31.814 31.5405 cv
31.646 31.5537 31.5059 31.6255 31.395 31.7568 cv
31.2852 31.8877 31.2358 32.0376 31.25 32.2085 cv
31.2642 32.3789 31.3359 32.5186 31.4668 32.6299 cv
31.5991 32.7407 31.75 32.7896 31.9209 32.7769 cv
32.0908 32.7637 32.2329 32.6909 32.3442 32.5586 cv
34.0952 30.5737 mo
34.2129 30.4536 34.27 30.3076 34.2671 30.1367 cv
34.2642 29.9648 34.2012 29.8188 34.0771 29.6987 cv
33.9551 29.5786 33.8091 29.5195 33.6392 29.5205 cv
33.4702 29.5215 33.3262 29.5835 33.2061 29.7056 cv
33.0859 29.8286 33.0269 29.9746 33.0288 30.1455 cv
33.0298 30.3169 33.0918 30.4619 33.2148 30.5815 cv
33.3389 30.7017 33.4858 30.7617 33.6572 30.7607 cv
33.8281 30.7598 33.9741 30.6978 34.0952 30.5737 cv
35.9922 28.7285 mo
36.1182 28.6167 36.186 28.4756 36.1948 28.3047 cv
36.2051 28.1338 36.1519 27.9839 36.0371 27.8545 cv
35.9229 27.7256 35.7822 27.6567 35.6128 27.6455 cv
35.4438 27.6348 35.2959 27.6855 35.168 27.7998 cv
35.04 27.9126 34.9702 28.0547 34.96 28.2256 cv
34.9492 28.3955 35 28.5449 35.1138 28.6738 cv
35.229 28.8027 35.3711 28.8726 35.542 28.8838 cv
35.7129 28.8945 35.8628 28.8438 35.9922 28.7285 cv
38.0342 27.0127 mo
38.1699 26.9136 38.251 26.7798 38.2769 26.6099 cv
38.3018 26.4409 38.2642 26.2856 38.1621 26.1465 cv
38.061 26.0078 37.9268 25.9258 37.7598 25.8989 cv
37.5928 25.8706 37.4399 25.9077 37.3018 26.0088 cv
37.1631 26.1099 37.0811 26.2446 37.0542 26.4136 cv
37.0269 26.5815 37.064 26.7358 37.165 26.8735 cv
37.2671 27.0137 37.4019 27.0967 37.5708 27.1245 cv
37.7402 27.1519 37.895 27.1147 38.0342 27.0127 cv
40.1948 25.4829 mo
40.3379 25.3936 40.4282 25.2656 40.4658 25.0986 cv
40.5029 24.9316 40.4771 24.7749 40.3848 24.6289 cv
40.2939 24.4829 40.167 24.3906 40.002 24.3516 cv
39.8369 24.3125 39.6821 24.3389 39.5371 24.4287 cv
39.3921 24.5195 39.2998 24.6475 39.2612 24.8149 cv
39.2222 24.9805 39.248 25.1367 39.3379 25.2817 cv
39.4302 25.4287 39.5591 25.5215 39.7251 25.5605 cv
39.8921 25.6006 40.0479 25.5747 40.1948 25.4829 cv
42.4668 24.1235 mo
42.6162 24.0449 42.7158 23.9238 42.7651 23.7598 cv
42.8149 23.5957 42.7988 23.4375 42.7192 23.2847 cv
42.6392 23.1338 42.5181 23.0317 42.3569 22.9805 cv
42.1948 22.9307 42.0391 22.9448 41.8872 23.0249 cv
41.7358 23.1045 41.6348 23.2256 41.584 23.3887 cv
41.5332 23.5518 41.5469 23.7095 41.627 23.8608 cv
41.708 24.0137 41.8301 24.1157 41.9932 24.1675 cv
42.1558 24.2188 42.314 24.2046 42.4668 24.1235 cv
44.8379 22.9438 mo
44.9922 22.8755 45.1001 22.7627 45.1621 22.6025 cv
45.2231 22.4429 45.2192 22.2837 45.1499 22.1255 cv
45.0811 21.9688 44.9678 21.8589 44.811 21.7959 cv
44.6538 21.7339 44.4971 21.7368 44.3398 21.8047 cv
44.1831 21.8735 44.0732 21.9878 44.0098 22.1465 cv
43.9482 22.3047 43.9512 22.4629 44.019 22.6196 cv
44.0879 22.7778 44.2031 22.8887 44.3618 22.9526 cv
44.521 23.0156 44.6792 23.0127 44.8379 22.9438 cv
47.293 21.9497 mo
47.4521 21.8936 47.5679 21.7886 47.6411 21.6338 cv
47.7139 21.4785 47.7222 21.3198 47.6641 21.1577 cv
47.6069 20.9956 47.5029 20.8779 47.3511 20.8037 cv
47.1992 20.7295 47.042 20.7217 46.8799 20.7778 cv
46.7178 20.8345 46.6011 20.9409 46.5259 21.0938 cv
46.4521 21.2476 46.4438 21.4058 46.5 21.5679 cv
46.5581 21.7295 46.6631 21.8486 46.8169 21.9238 cv
46.9712 21.9985 47.1299 22.0078 47.293 21.9497 cv
49.835 21.1328 mo
49.998 21.0928 50.124 20.9985 50.2119 20.8516 cv
50.2998 20.7056 50.3242 20.5479 50.2832 20.3799 cv
50.2422 20.2139 50.1499 20.0859 50.0059 19.9976 cv
49.8618 19.9087 49.7061 19.8848 49.54 19.9258 cv
49.374 19.9658 49.2461 20.0586 49.1572 20.2046 cv
49.0679 20.3506 49.043 20.5068 49.084 20.6729 cv
49.125 20.8408 49.2178 20.9697 49.3638 21.0586 cv
49.5098 21.1489 49.667 21.1738 49.835 21.1328 cv
52.417 20.5347 mo
52.583 20.5078 52.7158 20.4238 52.814 20.2837 cv
52.9131 20.1436 52.9492 19.9888 52.9199 19.8188 cv
52.8921 19.6499 52.8101 19.5156 52.6729 19.4155 cv
52.5361 19.3169 52.3828 19.2808 52.2139 19.3086 cv
52.0449 19.3369 51.9102 19.4209 51.8101 19.5586 cv
51.7109 19.6978 51.6748 19.8506 51.7031 20.0195 cv
51.731 20.1909 51.814 20.3257 51.9531 20.4268 cv
52.0918 20.5269 52.2461 20.5625 52.417 20.5347 cv
55.0381 20.1387 mo
55.2051 20.1235 55.3442 20.0508 55.4531 19.9189 cv
55.562 19.7866 55.6089 19.6348 55.5942 19.4629 cv
55.5791 19.2915 55.5068 19.1519 55.377 19.0425 cv
55.248 18.9326 55.0981 18.8857 54.9282 18.9019 cv
54.7568 18.9165 54.6172 18.9897 54.5068 19.1196 cv
54.397 19.2505 54.3491 19.4009 54.3652 19.5718 cv
54.3799 19.7437 54.4531 19.8857 54.584 19.9956 cv
54.7139 20.1069 54.8662 20.1538 55.0381 20.1387 cv
57.6611 19.9546 mo
57.8291 19.9487 57.9712 19.8818 58.0869 19.7559 cv
58.2021 19.6299 58.2568 19.4795 58.25 19.3076 cv
58.2441 19.1367 58.1792 18.9927 58.0562 18.8765 cv
57.9321 18.7617 57.7852 18.7065 57.6138 18.7129 cv
57.4419 18.7197 57.2988 18.7856 57.1821 18.9097 cv
57.0659 19.0347 57.0112 19.1826 57.0171 19.3545 cv
57.0239 19.5269 57.0898 19.6719 57.2148 19.7886 cv
57.3389 19.9058 57.4878 19.9619 57.6611 19.9546 cv
0 .69 1 .04 cmyk
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Rachel Reisig) ()%%Title: (Final_Final_Lana_Rizika_Fitness_logo_ol_cmyk.eps)%%CreationDate: 3/13/15 11:58 AM%%Canvassize: 16383%AI9_DataStream%Gb!R&kuo%<dP,ub_"V4@LY;*@J1qgmJM8DR!eH"AE.D>4Yg(l`muQqk:CU2tmV]LhIJ3Q/XChR9Q:e/TWN&ptC)%)FXnUuV;tFG(%p$_"T!rluGO]N8F="*E!IAqEghJ]gihI#QmmRb$5=7:5\X[]AI=jA,?*h]a'^T9@4XafFk)n!<@>bSfChGg*cokLQ+;X4C;U4S*!%G-h#De@7_hJ%;\jQh.e"A$LJMd*=ZPCH51?F7ET.Y46sJ567GMqn3ejh8'p$%K1]Ymri-@0F0Ni^<1f#gNo""Rlr2BI6BdJcE"CF%YKT;Gb2MH2TFRYuZs6$s[(H`q._=rWH:#Llo$FN6Dt`HhrSaa)D:c?pXlb[)JQ'2RqGM)nG9W9iG@0YhYDl_p:39N:4)Z%sQZs%J%UN]A"V8<aVCVVoO6f[q?ACUX)WrEI)iU3\uD06nfPUB7N4:1+mp[m^"J?#VX-jp"82dbD\p%DP[WJffS,+"c?[dNI@jh0``Y;U,+%!XAlX,_'igYI4'k]aLpjC:kebbBZVO!4.&Lqce"1"CVPUYP%&0eiA_78QUnGRFbH@W*0u7Ok3:EafFneY?BA7Q$7)K?WI)9i!9Yj%aW>tp$7EV'a6fd[VrmQ5V<I_$_mYt?G1oad5.fHNhVfQ08C7bAn&kZU`.36E>AjiWJ:B))4rd!?*hIBW?QXiqS$aW:S>nSp9?H4_%f`\`sDUl>+jh0iF<dqOWn,2>*/oi]9S"f6De$AJ@M]AZp.^E%*n[G[]>@#:Y]$>5p<G]p^/.65r(-Yk:f!6j.AQdQ`KF-G8j%l`Y%XR0J4f>UprMm`%-r/%g2's(E7@*;.Ghc)(-Vcq'KeZ*1hlY70l=0(,28'L#TnSjQe(0erU\t1G1:TT70iD6P/3(Zg>*Fa[dYmt5r%57qg*$#YY\iD4hfN:82]@QH5S`!Ci:hY8$_&LZq/WQG*K/]8$H@\%6KbN/TZaI1%A7A^^sjHb`bO.OD;A)lEcjDp8k%K;-j&3p)L%OE^sICOX;[L;0u/i[8B+WPWKa5Q$@6L`Of+roB2O$3%kHL`cWW=_'-n\oRi'UZ;Fq\`=hmB08AT3n@cO8\-V<4F.u-O,NmHaE##)%LAZgL&3J"%L`Np9XSFI-LHi$Zo/G[L1uYn<'C-ca\UrmY\TX?\g]MW,jC-.\P1ss:bULaDEa?aHA\.KsR-NH[dg\f"B11b!A&hcY%GD=E1q*"c<On6_+DWWrlg+\10rF>j"=$*n5($'-&=-fYGchkrBP4*hu_q%!^ad);?ZD=cj%lbb)8Smcm6]P0,=8'gV\YZ;UoFHGX%<)gh$:#e23DuPMA%0-.<q-U:4RU"kPk'shaci.k^k;`D+33mHmr%"-0NW5LJD/SpNs-s&M$<p_>irA.jgY;Yms5nfgpQ+Drc5loF%H0&]7`4l=;c);IkFfUDl9`1k5?-D`09E/)Xs"a'Xr2aeh)SL::G(j\IDlQCDjYK0,[](<8!b7mt_2PFN/,ubc$lAqrg7)+/#>=]H%l8i%jru]gs<s%ah.eX@SChP,@n`rPh2qT2Jp.?eQon.*U`WJ_$De0IO)t6e:4O?%%+Uk'X+n3rkY<HjS/Ht$Hgp^Y9m01L=,Z%,A%A*Z/jQQ\W[Eo\7UQS=Zf(kTN-28DL?[GJAF;]dDrDThkL7cG!9*mOc)W`J0D,iCos?,a>Sm_SQgg_-K@lksD#5`8N7b`H/1MNL9.%Z=@fQ[oDEZ'qo]lMG$1-Noi#1b=[Rp650fe^5&$$@p/M;DqS>;J[dqH,$X>DQ/n4s%qucTV<[XjN>&8YO/]%cbESo.L`u^IUMWg%%E]O,)G5PP52q8O^Y)AR%cuf2XA1,5_>*Z/$MHNOq2G?!D8_k)]7SfIkjtX]keX/@Xbe7Iphafms"PVO5VT-sW'?>"Ur"_"AFo9@(%OOBr&<EN<N'@7Ae\\dMbkmkSPV(l!GI9Bu^i[AjO[EP#M<L0MeI&.-sb2Kh?6DU1lSf,Cs>+-AXhVORiKifMT_&6dRJc7&cX#*$:%L\)*rDO($SB?YLp]KjS)ZVq@9q]>#9O&`H-28o;R2)XAM0pBgIJu9$,jH?k1Z`,\Y!Z)n6il&Jtg7(R7<HOfQpg7[)%)2t2M$LM'%B&&JierWgeC[l<l\Knr4'gcl<L+:dab^#K:)gdZVpK(!)'7LG:Ul2?hjP4*2E#-l`E+FuloAt!sS/oFQTZig.R.K9"lCTiX!4Qu+%d?6AN-?P!b3eKpTf*0JfkW(I-iV0iSast_*fd7[qa]i5>W.9XMn<)LdFE7uq+WXf`-<>A'W[(0oH./+B/15fp,G4l(8$%=KX`9'h%XF`3K"kaA(F)=?D(KZA2=t?c%"2-OpW%ar_ehP=5chBVQbB7K:ZNT9QlAs`(JN.ThP,9/GPCBPr[fKLe=`@#6E47@YLIQZmYmqBk%%9'^Z]N10@6s8S'.bQ(-^84fJmnH(a_B5@``UWd?YdRN"#GLB%>Rar!a"4_2ed]H:\8P/H&-UIIj7ME).r6p#"M#0,hP\Rs-^j=I%3lf^D.)gd7"&_\]=%PYd#tYts=&HL3Z@Qit!LL;AcDHd<_3aDl1u,R-939gWa;)EaV8"SDAWdcD91@uU?H)W(A,(Ps(<#7f;HguN%k]+&*B/=k7.7p6AgAu+`.=3pV8,sR-B$7q_%GnVcNFlraQEf9*[q'=E^%bg=jX4I;<95)i[34/cC=IQgZfTi"!P'OH)73LZNS-Xj%fK:q=q*D*X`J%g@d?S#52a]oo_9srjCP9ZlC>\RJQR+8#F8.!$'o9.R;G-k1R)Y;(p9rR>be'rj!hVjI.Z^l%H8*q($X(.A)n('E%CPdD"oEnJmp5a\Hh8o0VW/-ZGnqW``Dn`\C0%FI64l8`[i]'m+V(G`%bGumbik8dte1[$6LusjPd;n\^:e7%TcYkPN<gLC1b5H$7%Lk-pfUbrn]<[5e?pJ.a@J!GGMn,J^-1MY`a9'[K@kfB7#L[:iVO&l_;;:;!/e_UeCbgJ:`L!"jmr2FVCgWO'hbACCV7e`!.4_UGs%[KGu%amQ-!9i15>X/+4_^)_F>W-)p@9OcUZ#(;,NA"j%i,Q%p^=82s9rsR-R]QJVhQL91*2:b!GmH-QX^A4s)lNN>"3moC)dV^pG%&,a`MS)0[d]C2riihtt/UDD@.C8/m7G=6A>S!1iR]\7)/hI$#G^K\8%npTi4T!(%em<Y@2cK/^';>r3!SmLSX>Ar&A\(WKaF"Z9d%r_maB?3=TKP$7H@s/jk$m19&h;/=b:Gq/P2+$BK(Deafk&)/c'&+jWVc[6f)a1$Q`G?nl5$G6lB)NAr%P\RUa[F]jpXE>WVRuMac%^>f7Pa7/<&XT.KZn*o82S_n7uG96?_>HNVb2Z1^M/rHVBli6G;j+J=-O./h9hO[,hBM[`5pO?I%:cl2mGko)lHDT2+4?^&eYE)J'%E?3!1pNkhCK.tm6QePR$WUo-@;kW3If'Y`X2<q)h45Ka+)Dn80n#,;20]M?o;n)1U[e93K8+$-$a4b="@!3Wm<:eTAB\n8]%*H>]%V0'Q;nf'^_mJ^tP41WdgZh:LK4lhrNZWA:/C@@/MO1BZ&W:j-80BPm):G8o%MQ!91O)p1<Ed`\W^?"AFl[DSMr[R`%^[U_!rqHRa%s2l;V_u/$q-%?H%(LM3-8:,?K/$WblalQ1B/c;IH!_31YqVl`tCXdq(Bb2Z$\YSh?*)\09EsdD;QcjKZ&'b-FMk9Z1j-*2UKQ82f%OT,=#&u9d`!N<jho;jG>MO>*nr'-nm!(@5.J;^\T3!.[\2^S8.XFO)BG=]k[q_(0@*$-*-md%,2=7W]tIVCXtob*(\p=&DU[gnj;%&Z_5PmFqS!+N=CG;![Q>WH$gu2n=s70C8dO]XR[2q\N<e^7G5Lm+hM;CNifeELd/Qd*/2`s3qtUZ7_Ge''_>_@<+4[P"t6*s&/,=%>KqHu_DGG?ch7/dP`[g>s1<O35#JtWRK5?T%PVd]#`8QU"`'05qF@?7RS&E1pcm;H)tbb@hfi-$Dd)AJs(#I$=S9GQd>6X"`Q.q$%-/!d.&!o@8[!>L2_%Or6NrSWl!Ftq41mJ#)XO>D_J,M%O`rG.3ctPVurSK5cQ$hgh^",`Bg.]ulhj1g$dJ017NPGL11b_P4%jM%"%]'hgp5t4iOminPW:-XCQlVA%P=ld"mo=p5^^9lR.V''m7l@S:cW;l:+,]smPHJA?N;"Gsi:0[2S]/jL\r7CU(BVYV$&74YXg-(fd%UQ354E?%pO_U"<t])n8&`%k'C'`FBmgjH6[]ku<Rp\?np?HB2C>H],K;7qddP5ie3r:P6I?0cUumA5<tG?nm&>AM`WGJ5Wj"ThEJ%]^.]Ze7i@*"otjUL+ft*Et^I0XnQ`4JK=_H(=SK<39nD-k;!!jL@On#jKQf(3>C8ce-sSn7T9KRom53#D7Na!Q-_LNhn-'Gd.EH6%!Qa)?XkA!%!@ut(Kb6H'k;uK>;pRE1Iqni*@K<sQFZng8d!V@jl^`A!T6gKPrSQH/pAIq!G5Kd6lMgH':\'7/pDdO^rffXG2':[j%&,#illW)6gXD/H7U(UkekOMsP^!VpYcg0s.cj\e)N[DhqYB!mMJ*QE&FN\gT)r*<B?3+3a[/:l)I=P'R]aP`o!R0/?C=`!IDS,RH%cWI^cA.khI*S0\OhHp>SJ3N#"k0k?P:5OE>iMmquU4,&iHSD1?::DJn^=M`@,=?jXFe0gGl+FI9O]o04PJGG/4F7&(<#"+98q9Rg%ShMV^jid,KQH/L.X5;+9em;e_SYqhK7a59CC*En;fa6-Ab3aMW%*8Dm;>9b>XE:WrH*t]oi96Qj5JZ3=ItBC$s.#irilPgtJW\P+%Fs2TTl&P0@f1V('2?0Xu:-G+KOSj=)p3lnRGCK+ZUK0>G=q-Xng%(Ois3r=VCj"rp,DCUKN2,KC-;p3W\.klZ"kQ".XFW%@2.6<e%JZJ@sQHiXED[*%b8.'G*STaE"#oOS@F'1%a`*Z&GEh`_A06j@JNC^]M)tbS0Rbp:hbt8)@S4nUm]#S8[T*@_LOB,U<1U4IdT[_t%%rQ3TFq*ISQ&M[8UXih?Ya$uU"Kuce5#O?NDNT*)g,Ta+H76I%L*h/#_^58#Lc0P<9]P]P^&*igO1N7NgGqE!6cP!>SqV!Pc@FAts%!G6YdRba:VI&:\Tf51=g)r&ljlgeX2ZLJCK+kHTnlhBjC^"]aEA#*9=:&hS<JYo!9LM![?Sr$LDWP'%9Kf"TbZ1\!n;9r(Bf"$4o%^=6K<X)abSA6Hk$^2(*6GHE3Jh_(qIPbDP\:JBYTB"#M4Nih-O0=KTE\8-Ks!#:!9,^O:7s!Om_UU<W?"C]8C,PDISCt)dLNu@9^%P<?;*LR70JllX#<caJG(!A>UG5-qVI8aAQ_4UrlTAh;hL<ERa!M??&%`1ar_&p\6kDY:![%\.Y8WCeM[D6;Vc+YHatP1B#04U!*!%L<?*LaA=f<-8O'\$48;g3b?s!8"H?Z2sLfo"/F.<4#lLb+Wn_o]i,1-C_Imhf(&3@[s6eTD?"K2e!BlHVhfL5aH0.X>BG`F1XZ2?%6IgV;m]$$Nf4$fkP/o,/X8.iGGX4J9]DUJS*1?_N]S/q3fY29J_CJrPRjG']pH5!AEmJq_7Cb^rHhmQ/+pS"'XmT]4SO.;B<%MKV%p]B^djY(jQ9iRnh6"7H_[=Sn/=YQI5!o<$Xs5pfEYV0_bO`8\(2c`i+F@`2R.Hu.lh=hNp/!40^POq:\)&c_\hEuXjT/p[NoN+%L%kF[8`.DAjGY1BOE=FKM3W%Y=Gg:7$L_OslkY1ZAk.FdTG21gjgGY-E$5bpSd86Y]812SI;j+bbZ/2SZXFZT!#&h?+OE&Hq\e/Kj;%VuqbgDB_uT?aK`.o/GihU(g;6ApU#&M?:76LE&PK-uL,Bp[r^CP9QW*=ZZAaac80W5V.Z&Pt@\`XKtkDgj6Y,0eoUn-O"XmE;r+X%ZRF6aI0$[YIW+(S&dVIKendtQOMB!,WRXcOK1u$MFS;e\>0MJshnk\keck#X4a[%mpuH`Rs,Y`D)iCX=YWmruE'PH!83TV[p58%@%7%[(S<m9UD39l'X>Po38+h9%2I/ll;Xfn<cm^!jn-STC^^jH;OrfG!grk>=nZB2=lkP=?WFtLrQ*K8P&+;3D!3Y&?aX]t&(bH>bo%MZ@Wd_a,),X]pjUe5*2NN!kZ<;P&ceN%0[%*Ik?rF\Z`Pe.9BIG^=5Vb@)YtHDf.$aUO#V@UC)rMOhh4\It2599;$RVj4qYa5![>%oapE*Reb-5=?jPP.A_a9Kn]3?Y)\!G`lHEK](b3jpD:MFdFZ-V2n+7J43tN;?WLrH^Qlu"n#a%&qSdcNR+$7\-^I@\?ZLjWKsg*)%'6?\$h20+k-[>=MGB%*NIJItonaL"'@S&T0Pg\jY/9Pl+<9?@`*NaAgKA1]1erP<_l'm_$=Pp6ImiRmF<Eo/U?+K^e._@Y49!6NY%YH?ZI(LN4eD="m*2.u[D[plc<h)O;0?[l.c^/lu&<`dJFGNsS/DMhcml-Ba&V>2dkhgq&G/gF?F&):ll=APcG::n3fq$NZDmO9IB%PgStjeo@_GF7!W+q1E_f6)C06IB`)\9'7G7G2=%dFs]Bai\W;mcc&f&feK#+Ps=cJdt$#9>N&>\gHQ1O5K@uZA,eBPpO3lf48h0f%FHA"@](J.mT([@8nXY-!Qu.&s69Dp1'D:(He<]:r:3-TRgWn%&iDN"?k2U8pk&NPt;rdF8W@ILpZ(4Wjn#]i'gAWjO'Si_erVC@]%Ti5a,E,o,7-[#8YfpV\ck'%0B"M3Dlg6gR*/RH@.q"de2&tPW<bXBOQYB1`Xe1'nHm<3_L07f=:BV1<hgUZ0D/RB<qLQr&,e7eNZ%da+!)`(nRsnRU8?eE:B1[atHRTl?UMC%]bdc<,C/Vk*Ah4fQn9TNLOFZ5&Gda3!#[N;]Fjf4k-\QWfcG?,-4Jf;VYj\(COQTpP8M%:7n,e=5l;!/q5;"+1klh0qGCh<XR0Lo@(3EEs6,fnbjj:=)2QJrigC4JE]J$h0D/O`_P]DaSWM/^M[s`*($RsCT\5fot]Fs'V/P_%bsjb%:(NrB\^Ts3k@t:Omi0Ece[?@IBs,gNgjSM@cVpGfl8IA\iI(MOZ."]qRn>]7e#PLjFLg8%:6ER@"Q!LshS66IG%3Ts]ie]6%m.BLfpX<_ZV^VA#X,:p]F5b%MGk,8-rUf(BhMLXlr'5*FG'^Sqg1aB]\O$_-qo\`8^6-e,qV:nmDnjH"SUOeXSWE(NA28=TF&VLU%9-E`3U&6nL3Z$]<dIG,HMli'3Z(:mX(-b`qW*ajjI5tI*E08Xa<Oqr'p+a;1j,LVC<Ol%bF:,]X\(cCuX98Sd]+a(^PQU?\2VHmm%0:MS-qmS'X4'h&Q1riNFF$JPhDI?K$IopPXEW%cpAQj3Pm*8*Xbm3A"aJ;S=RC1`(E2UZukMal(G.QaY$G?]GEDW18T!GBCkshR@%'OJ7RmW<l#HSIkDM/r96L-,@]?2bN^n(cU5b3nOBkQSOLonpUBFiciBn-;"V^.18%5HW7g:7"0]_jKk`D&,<_Ue^UUZ\&AF'RO7n%Vli)CmF;MdWq6ktaSdf<dJ^]_SSC=9\QupdSh1ZKO7@-I*K\C0B*[%\@c+rP-9`o+f*gDf[khf7X`H64pD.A6\i<R>SDM,lE=umX%[V=FFBbfP"Yg)7sj/Z-jEGq=`qtS47)0tPmrbf42W,(;Xpssd6-8pn!D1><*gKiLiq_Zi[J%Mo^a;#1#(<lN+pX[U:`nL;`_V>%H%-d25Z;X@WNkdr<%WO<X2YleRkS'.Yb\(6>@g=>n#_V:-XkEV+c2Bm'&MB-NYJ"(=?D'lXH?+d.=?a&MI*gWjV<p0+cppWb#5U6<n%gh\Vh]YF75U3B45_V:Edf$\WqM19mJj2Cdl>N3(G'`0V7j`,K_l^PA).1]qFeh4>[a[Nh17'ZU-;7/K2>`Wh%>P[eKo4Mtsp2/dC%kPOl(M50aR\*`nSc0&=thtT;qMslS;n$UERj3O2JppNZu[ECK^SV\FE>Hr,(IkB!l(HtUlU:39"KD2Efo,HTLCOYTWf=?sGhN%&i%K[cI&48jr1Qa6MSUuH79m's0#E+^m[^V?L</8fn32R.N+'D@\MpKo:[YNF^3Y7o]@<[O.+Dnm."Gdb09g1opk7WZ.,rV8UC%\;_j%Ce$/8BsU1=Uu*9-DPp*&X1*.XiD"4-G,H%?S*`daB(]\+Cj)[[5o%$jV5*hcoYR)ggZ^B;6+nB,esO'EmW>c2F"+@mV7L@]-Zj)t%_(M^dYMAp/L-!$GRF:?FKULW[c;+8blVpC?,1*Hu48!4!?cu2g)IW^I#^0sQ:'\o<H/hPje,'XtVYj2_Q^,SDOl(#/^rUArnXUSb%QcYdn<ZdRQWXO)EH\[8L@5eL>LYJV"CPeUV285h:-fR`68ReT2O.7MYGL>lDXc"m9HQOH<W\/n*6/C!s@Npihmk`KUSuP<3IR;<$%j4/tpp"Jjnc\6nV5b'uOq<QLUAEcGH`S#si<p,:L+9&:5rO5:MOd,N>r6FgKT^h!8pp$t)gc+:9_L88cpa*GA:-O2QS@PYUES%p@%_EaGlCTk)=?_^pPk^Kl1=PkUdO"%8bq1tM5G^Eg\='Otfk+=,(dM[]kp=@g'$\9BB)1?j933iUN:HlG5.KWo%G6('35+.*+rBOs#%D)B2PN]dfZ(=mBrh#IHXFPf)?J]A;"\_cMK5?]_^KBbi/'cBp6BkhpUIP<q<?UIY;<e8Dt(Rm'"]_<d7rV.#\PK2UjY3mCMiKl%t%0r,o!MljK,o]K"W5Q?&^DuLL_"i&uE#^NKf6Q#45HoeO<cem#^'6"hF==M&2PF4R8aM@4-Z'=-%D\lP:bNCC:@R8:SWO:uYh16uH%7/)kjaWja`[ZaJ\>T0jkU??R%)&5<hf9Orq#9NSId??*QSW08rlLp:aNX%n3-fE;L#@Wk9Y0-.tj)4.,8@C22O/nr&[>/q[\:`Y!%'ALX0E\7q]I<oK)?m*t9>)Z%$4k61S+*\5@%7I2IDU*X2JijgcC@214'e`$0(LP'pU(9Qs&n_#eWu.!RhD,N0\PbX@IL+]n_.d*-%\UGd/GlHd_#kNCgp3Vsgrp2Aa@XsXY;Lhc)<uHP-K7[)>o"hKbC9?^2X%aYJAQX0@X,]0M<qRpgbiRjX,6&3qV)IAei`;\1Rng>T%_@qekKG5[ZFpr<=-4eWphC(Oq(02[?,#2Hn9,O)jVJUd+5K+kX\2bL<KghmbFI'<-m(>fb"BqG*;e9fHdBeK!fZ?fE5r&&=)+2&]%^Cup5!O\.B$ol#JcMQPN;uG@)_;A"`'+==\oc92WRA)51nRO?<TYJOHU`jT2[@_RG'2:M2A8g=;;JlE[%/)LAZHln4;cUEijACH`%cd]DPa-A/c"kIVLOZ'AhR5b4?iq^EQoW>\Z:b4/38#06hU('dNiRnj&VJTXE/ql6e]=:hK#If`lZ'(_$a4">[,<5f0D7gj8fM+3+%F+kY;45O#jNUF_T=HsE/g5l!Qr;eh!I%&eOPMPn`:E-PP+.PCF[s^L\@9`G%BBS>%WuE2_QaMi,'U%$?L1s97i^F'gQ;['GqFQ5h%",Y`t6d_^eZBkZUHXs@Vk$h??k/E<7fUeUo1d)Y!.#-g71*)O-$+dQX\%737OPnX@itL:?!Q7LF!eG4@AE&\kKn0FcU]Bn//?n47%m#=R:!.H!oh<u`N\%_e90V.:8N'uRgqR/^;In%MB&,Q.0+.YoE4A5ndnhT-@@/Z8VlV-#rs4L>"X-8kfpbUNO#.M0HQ[%Mu8*lD#%=QTn-H4>aj?`W#(!_58JIX9>ElgF4Iq@m5n8KO$O?NSm%e*3W![,63m,l7-g3XY_#MDMbQ5Pb#bjQ+/5,QM:3X*XppJ%QEje>&=b%E,WC:;X0h9Dn/2d:Eh;UTADC!k]2*aFS`BAAn32],$Ck2S+[sgO<f;b:aa@l'B\A+g^JHH_PT/E-7`M'H9Z.:LP_WRA2'n"*%ZT2%)No9l*olc9T1S^^KL<+nh%-PP4hMRM8.dJ(*lE<WO6XM(pjDo/"MNpgb$i!2qYF>\c[\hES^[<X8oH*Yn@B.D7.f;SKLpA'k'C$5%Jh;o1Ym8`FSh8.Z=BO+ubq=\02ZTn:e+@dL^?WS*$po4"o*KNQ01BjJ3>Kg(Y<lWn/F/"8/D]3@^m%]-EeWT,`qtS)9!ahXncEHO%rS`DgOopZ_58,D(,Hj@aEZOi+#A!BJE!Fg=Jc1$+Yj_tX5Y<kT5"HUfZl.[t@bJ7d)!Dr"U2Yj1]\lnU%XjMdpl^SlMm"!i))+9r%Kt.)l-dh'd,hgr0&hV3m!c)9S'!:aF4g!"I_8cOK54juK1?/ZR!n0WJPU`n+31V%3m@V?hZm"$"g#*Jpc?DQn7[Ie$j#MH43&c[a%B,aIVHWD?aaX)8AN^FJgU*T0"6Uuq%2Mu-OMP880#'auK'%E1(n0(0Ce\ugn7QUF/4A9CXOS(a*K8E_22MdHk[@\jZ04+sFIY]W=%h_T1?Xt[/4Jft@,fd'6u3)N%\T[<`l'$eQA&-O<1''qc,mgCLgjWp;UZ)7m2Cd>12RP%hZ^5K3Rr&0F\+(E[a2q!DTmJ(XUeOP19%Eid#6"CPB@O,:G%['Ka?,Pt^q0LPNtdC%W9_-L6L>3sulp3d4(d"N]YZ#=XUI2nJVTeDp0g+ZeK8dSFc4OcjJL(R^I+lS?n/el"k%`4cWpNeH%l`9BTq<sF;Tr%O't>6)\91N>Jp+sjA6FH6TC(A_-t)(]&BP6"d_"e!3T"]/eqY<o7j%9'?2a?#M9/JE=r(E(hMg?C%;%"n[juT"cRBq>T>pd36I^;Wd$Kb:B<SMD8l11/TVLqNDR-dqpIDPElcjQFu+iN5j9nOYXi6Jt;]!`H1n4-u6n."[Kai<D-_+#!0F`%@,9%#gm;JQr5hMX"6#Y9:(E!8V?0CE0e1.?9(4EO"@f<sSg\.e<17#NAT;u6=nmMpK7SZlA,6R^Rq;<:Zot\hpu`>IismE%S>D^b%%(]\P4?7NJ)0A"Z6UU"_V.\0FmWJ.A](?EBZu!QEEp1q-kec#)_roCCB@,`Ij2mufc_-2,$P&^pQ_$L0.uYj2/j4iIU-$AV6^M,?%ZCf-u6^OB1(\GS(P!bS-5pu$(r],)ZJE5c"Ze%0P4#I4+3>6)dD4i$uH$W7M[/1#EYMRQ:aHm69I3V54Sp]`8&XqP)$ZnEI,aLRg%N:1:(3RV^d3q[+<oL>:oB1rM6aP]GmTCJ`X>9"MFZ=*QBc=P&"fPeH6-@4`,VuMjA1EZM(_,?$;RkfcUd/fHnZH8QY`PAbh`V'_+%5W(eT#d=3&@$%#8j#NUhf[8>^U;9Z!2;PsES%d!^iCM&+*.q/(N9W-`a_pXh2UPf.hdj3i6:&K:&dX\AXrH/bp>(HG-nh'@p&9KW%_BE$cBAH\rT@d*fHh*QJa,DdS2L1E+iXjc7k!IrZm$Z48@Zot@.Ae;M05Co)s1Nh<mOUG-O%!>er>gY$]l'#1S[\fsiD-JGS`I`g%\1B=k<Ck=9]BZ8_'8,B9V16'!F.D(b:1Alr0]pN%=s^)DX``5[,n)6AP`G@N_k<0&i4Z,51k4q8^DQ_Ho(\[<h\qk#+HN^E:/!E!%KQ;;@Yg_`Z36OP^8BsmH"B\d,N(C5>5.d,3.$f5p1,+kXU('c#YiF>QpB3O"f/aLjCrd((_f"?77^:GVrK\o.E`$P5"Mbg5M4'E3%<W:BYFa)H81MgN@=Z1UiY2,>e?G\WF[*?e9&#4Zj1p#>895sXjcZB4_JuNcXc;<uO8Fi?"3Q8-#g@%gtj<MYMgF!UYn6L`sj@HU^%G1/[$idL2>RiSL,khHrkG2uuEXB<ab9$R$kR6Jk]g_N%W-#"g)-HO.sS`Ga.\/?.+*ePUNZFVVMHRt:Sh:\mQ2*K3%-J)m,=m6V`%`<il$bco:/!rXn7&r.1C8&fYZJNP\:6dc4g@VH^'ffV%gU=1nD`MEtlqX';coi!6tOjU)_f04Pm/0:4%FanH(.()hg4>Pb2?_;2Q%bGS3"1?#hLeGYf_;2atcpsC,8e'J<naM_Ts\o5Ij#RBOm-R3cDr4G<X1'rDY,YYsDqi&WW5T;3e-YJ@#fQcjV1gg5Ed6DM2Mm<2k%5E;8PoeSHg@N`i`K=u7$j)O>qC2oBB@?$d'%;g6*n0#8tIX0bq'Y;XMI4Q#BOH_?L0<]8t=N8u!ebuT>HKf]t^5bk2'^d%c6HOAl%+/oTfEjee-k]pni'"/9]Zfr')XQX\Q^[F1CHoR.Al/NO$3?N.+muIpL%i6;k4mm^-OWma\kJQtL:`WIu*6I9(=(&dj\C`Hd-H69#%Rh$<pL6BT,j3<@;q<fX4)fn2JL9C`=+Wi<j0>Waa1$?Hnm)9TtFjQ=-liCB;?`]^A5ac++,G,fJ[Oni(7.s#?%(GrV7Sg3X+d=\o%Z7h`TaPb8i]EfmjGogKQSioP^7a82N.)#N?p_`f*'(%7#+Vp&](2H-W)9*ZX@1$4b,#2e`HFNpmB6oO`,O2e.)r70R^s8-F:4aHY%>__"bQU@R47]^U&pDB4Tjm-$_##'!aQ=75X/&<*3)$ZeM+rp,W2[h)04?`[Z>)?\=#V>n1R=8L1$\I[>=sILd&Fj1;=^P)gD*o>b%8GtH,N7@1&0kR3_Yjl;#?GDIC,?:9ka,uKfRljqLLQX56(#Y#r2ZrkbRD(0!G;QSZVa3+:Z[W0?\0[/rl_=WHo$PrQK8f;X3m4jf%4j.ei[a.?Po4s1^\3r>8el4W9a8/9tKTR5u'eX3,`g[;oP2A$9.bnG/b$e6-,2XNSC&^\$iF9J-@o%eOnrIA;T7R!c+poOO:JOK/%$3s*1p-nbT4a&io&#s'TR<0OKIsWl%!uZZD5=@\e%<L81Iq3f._hE%fHDO`dFG,hj\q!q44[-Gb0,]qB,=BVp&HV?6N-Z$VT[/"$%>V%s0duQ-&[!uH][^WtPcVHJlh9CT>p<V9YeZW3'C9CCd/:IB'2-'Zu]!]7kqK94=CVbV;G#"^m9Vm&T?+nj%eg@lY-7!eR^n5uq%PO*J"*mDU?KH3*FPf[fAkEdP^pJiUFCi-_'Fd\K\G*//7L,\_'.2d;NX`d%/eeDGjr?EcEX\X]-X.J)q?E9XL.:0%QOHbY\(XB7C%,eKV7>+j>`$5d&+m<'=AG/F\C)bCoj``u,jh.3oo9^G`XmXI>jkS3LG.i:c\^QOc9DUO^(VQJoSG<SfNpH.cQO0<O#FBD3$oLfO:%O7pm53s@XQ]mWojcg!?:YX&16DR4\^?S,ihVcT*R4^KehR`_i0j`1Q]$d5[?[]_^mk=[%7M#+`ZR2CW]8W1.J)fcn*@"GEA>kj7k%.mnhc[a^o!aB(5g\b%EN;rTqp=36)poSFqiO7VjaY@G190('dkfPddKFHbL1?FZSfSdh5"fub%o52Qq_a7Z98,1e3FDbQM=-/t81%mp!e6h7c8AHe1MpU1Xb.%"1ccq"s*WYEr;)n)_TD]4S[*Y+MV9n8,[Er@ik8e&C\VHnX9bZK^@hl/KGg1J0Q2S51hN]o8=Q(RIcR%6K[;.a4Q62p-WKA7E?+dXWCD!>o]fW?O.N/RkASWT1pO@P"ca::(u!>A'1[,bGC,eN/SpL0$_cUr[utcZK^@rmJcNr>hO3JhmjY8%2I0Q?>r["L*8,FR8t0FBXP%]86]-?GGk>g`\G=;_"u8t1ACJNB?YhRK8D/*uT_dLo4@D)5Z>DVICq>0G2KUi_0.?aag:4KRL8EO1%flV3qXPDI7l/D\>DY7,<l/D^(`h#m@G?WE."$^fa?!K!fFS@hB2I0Sa=SQE;*8,FR\TC^I13tia*&0dhAW8"*/jgu;(p`DcEp6Ki%iu<CK\3@OTV@?qoI^+Yl-:YuXZ&&bBA+&L#QM?\I>-N-(mec;/L6QFY%!>o_WcaG`:47&h%5FhPV.cIq?3\:k)[gJ)r<.hmXQT@E%oaWF7.*-MBgd(cO2^FFOfZT@PT9W/kJJ;f2-A>4fXK+:EaVEYE`LK*+HjZp-Qn[h?cWi_n-!taQ5gER220\$J>\,_5#J]CR=i,R/%E'BfbR_+eXY&&r:RD'!!*hOu9\f26T:[^QR;3P3>>]Z7NU\JQml[BI0MCB@tA][rPUg8$hF5I1Y"&AIql0Dsi;fOc-oUW&7rNYHe%X=o(KPl06"6jZ[oSfKhXkB0!f/-bUA(HWP-8D!%9K)Y\Y0B2fJO@[t^p,A<e__=*,,AU<u'#kh_&D;N,lS$E&=`2k9);1KTFRkTn%ki0>dQ#tl8l"\0\/l[Wr6_05j)X;F7d86_YUS7Me2P7Wm?$q&U+6Q*W$6^gST**CS#(n_%ap[U"#gTA!OJ#!PG>b;Ws2Zeoej$Dt%jTbEl@]fB]ikW^Is0.rpV6bXd&:mim"'Klj2Eq8l1.?p&FB9Y8s4$3VUs*f8CPi^Tf%O@cJf;e+QSeBgM'p;>T+,>BVqdLq[MoWP%=,nkBo=U?Ua=t]hmlY6oBW-FCj3%:uk!Z'?/&alH<YM">ni7BOZ0M-QnZZ+amn"Mg,+cjW8P`k6n:VTpYPFbXL7,NbR40#?iCGo_%q>$<GGMEY8%!um%)ue^Z6#O2*Z,Z$g]5_@FDCph3VS#+9-hC&XA'%A9]&R[9XC=E]h341ijeBkJDn,+Shs4aT&$,^>G?M[qN^5.)%8aI)K)TfVCm"r-XadYK)Yds+W[C+-2=I2=.9kYsHE=@]3f5GZ^m=TlNMW#!/c&2Bf"MbmB@P'p/JPPHVZ2S^*^C(hdXU0@g1,4dQ%gHbT%0e<)XHn+u.DCK08?B"7&$JbNEr*c"T)3?"ul)#KSCPB/uh__4%N3I-Qp;"<dDVQm7%`SjWb)8r2l7>M#2sn]CIJA4:-@08u%@e/q$mM/tldIUnb4HO!m)6(TVBhXp'_b+nt@MiQ-Q!th@P0ktr9Jd/,mUFN_f?K5o`%O!dI^>W\d%6U:en83Oou)S6(;6J_8-^o%%MKMZ(A&IrWDtH1t8A/5Ho]mQ:4/DF&ANfdSBU>]*R#5E;VrbGbX&g`MDjKDZPA+Y%9"Vd>(-"bOlahM4.r9X;?@L`,^>7Womoj'_%<AobZQ-*]Q+2^'6?_ua21r@-DhPJ:VChKr2X13Pe>QL&;Y#6m`qn.:hA>N*dgqq4iEDdF@q)DaV37/)UjD_t:Epd:IZ?fkMlr9s5%h>A8EBs,8GYQ_AOU7M9U]B4"Q%<NN6&o2]W(HMTS7J*<9j5TT:,pE#$E],X0Xo85lND77lM@kD(Y.Oo*S;X3%7;g]b@sXE+q=gV;%I'D#R^Xh#?M4K)TW'B,dF]sjl<8RN7*.>Ol,d=S&FL@=ZWO!PT]J/((BBh=HOf)l,M?2(2+pi>$BD1BOXX)I2Z.?5Ll[qkBNO]_*%-e.4.'k;@.Kj/tDo\BD0l6kGEdroG6P7.;2\]?@7+'Mh-a3o)$eQ2HM6-J108PVj'b;pooJ4LR-5bTl'M+oD=`Y;U![?VS2(&#IU%n0FRK6po<V9O6Gu/6?&.KiY#qJ47483IFk2^BdOG#FgRB=qTm:2R[76OH@_96OL/3b^.B)o^#FYjA/ND"\eV'&%GqDij:Ug4MA#)%@<#:`oc.:F/dCaeN6gS--E_f8B0Et&n\NXtj2UZ?\8@c70kDU.g`F?^&"n)/\ps)0p)(Nu#]h&2A3JjpXbZO"7q5&ua70aFbQ5qV%0@k@!K#!PE['KJI,!dH_=t?%!>FR`Ga#U2R\^fQW[7AO#%aO8HXsV04nS(=Ulg$mU3_]P*<Lh6m.$f%Y%"0!;'L8nOs/QN)HR*SY%I_V)@*!]+^F1V>=9Z`eqp+uQ9"+PJ!cEZYI]S4#'E_*n>0/K[%`:"[VYf;;_lA8FX+Vc[^mpf9V,N$%(:'DVOr^(lG1TT\3@q18b%@RT[G"K[hr>iG&''OZ>BruHc%IIHpPNheR.MWs/sR#qZU-XF763qV%I0Nip/Er_sIh*WHDA_;=OYA,>6kaQac.0gDsJ+tS1kklag%!!XWHLWBNjcf+(J(E5+;0Z#;r43ZP@fVBB'j[MD1fW\M/Td`RT!URq58gMG*2sLS?a?sJ=-4_Ql.uBctnp#JbMHEXV?ck=SNGLsh%aqqcDlT]M@?^t2+r0R!I^QE@QQh'YfH"K0\9"^CL:(dfD!H3ceq;T&+j1gg3omYu,?-8N,rlPg*jU6>KE)6eZFi'f3cSD=$-f!uG%Nc.;D]maJ5j;Qd^TglZG08s'kZ"]#-gXplOd_.t%3EAN'lPJO&aK9p/IN'b_Y@"kB-ugUui4XRG1F-l29DUQrT_J:oioH6joh1>S%$$`UB]%8T&-J'+&p#A`K,^6Dh?Uh][0-.IWq^[H6f.[)'^S,NFM7M4k*MN66e\U_IMk-a;YF5uAY?uUo=i.Y@_plesI[$4I'X7F'%]%8T@dEsDh)".&i^X[8<02NtOl^,?99o+BBpg1_FW%%aI^QJ!F)ahntp3ZbdU!W.eiEj:k"-l,>pIP&TV'jR.A>B]XY@%3YMS.Im%E]_1cp\OQ;_$+cMPAs2^Vl,>trR-C&/u#t4^"4q2SAm?.GaC8`]mf2HfAV\<iU?FIj_shIlIYWuX!-s)9.-CFO_rTprDM8$)05:-%me'4;*?O-&^(J*=&\a<EoXotS>Q"cPk(pe(0E$\d3SJY\Hi;AEH-U[WrEd82>Q)R*Q.@TP,?G`.]mf5/c-[qk@INk^^X[7UqtL@$%dR_!2DrcuDGdmO/jZ^DmHg(rGDs4mdDih$p+qeLpHi88R/OHrCGo8sohWs@0=7!&<_doSQDWW58fRW_mV3s?qDm8+@bIrAbaF!<(%Y@"`Nf2;#0o:TX,)h#5Cr<A1jMRh>WpgeX<<km#[aMCfOJTIF2DY6Zub1T&SqBa3;@0Z@;Yp&T/9+Q.0nL4omY?t1RSC*C,flNaN%B="__Omhr^CgT3h]m_-@eT7eK.+*[`Hi;AQ,+$^!g[AI`FMlHe8K@8,^\!1]?R(VTY@%..IPLQK;"sg_)*r)VN8n6ZX>\:9p\KSV%14$!.C3JtEp\L^:LH\k2RIBfA<t<)F_P>7_O*Wc>;MNDATf:sUnm*\mg3kTYh@I,>knGpn3N!,=LXR"`Em.Y`&jF#)&6ee600tp@%$"iWm&5!Ut.8Wddfc?%p_Mk^UfrM[XM5AYE@8T7.Ve)]W::mWNaqO@WmE_W*_X[s1gS%b.XbG'\?E*U(S(Xo*melq3o_6Ia^$aZD%\b`-ZH25omSj**2[8hHhSfZ,*+((@T"mbg=mDaUh5Bth*rcRkC?U&\hU[-aFo2G=)s7bd<kGQ>Q:?h9Hr+9SZp?&6X0_abYr,_dV%ZEWosFlE3e[p:taSS>S+l&!M_]i?O1duQ##h[f/#(Yj_^fsS<RQNLLiL#uFJ]tSkL1&kbHE'i;ADChmE)&l1J=^P+-?b]U+SZ12&%Z?(EcfPWpU0=B[Zf4I'"Mat74pk6_q>^P43=ETY,E(VH*m7l7t[r9ukLJLjY.Z`o#!_LTDjd3,m\m+'mjb)i5H1fIt!g<!aSCr;e%&l5T`C7IJZ9nT"lhIp(_'AniD(ZKCF9](=7Vrp8Y/l&:7Q,[FpjE0S6bcfL/<Q"cSBJ"JNTeK3mgIq7VLHiQi$e<O5F`1ugrU^1O%)&#!EJ8.)^LY#HN\9r`?)BmufRM3Qq]'6!PCS)^if'SkF0MY7s[_H[nSSsb(o32U*EEh/Peoj!Fm-rKDn$B2fj^%3(d=Q/:Y#jHD%0DC_RT;Hc<;f2,H@@NT@SZ8dYI%/*iAf%lk$h)X!h7YsoqrdOj>bU^f/#bKgc0`.+2chG64>1D-]D%4UWV3cR3dqtl,*oGj.*U5m%ZbClH=X:4L[SP/pAk4A=`Z.,C`AUoh\@b(fo[TflDc!Z(E+T)ZI?FNWVa#Y.<P=g4g/ib'gj%IR3LFKt\G(UX>u[9-]GL1U(R;k>%pAuRp"0^#"Hgarhpu5`T\+`2q]NCWZH^$1Djp4n.k?tUXPq>ho>_/sEr%-]MYEf6/G$^LM/1V$l?lgbaYk4[X=pGs0C(1"5B>K6!%H%E$O^8gsnNmC?!rA"i+15knEHnKH940*sP4tH9YGkGtKQlZF`]C/fND,Z\IATa\gGl"MZgTQP-<h$F]4gKGeb$L=CBh-PhVhOM,%GOFY6MK1m$A4`2LaZI_fmPV<9"L+^.d+il].KQbgBr^cEiG>?-Xdp>"Ac'OH/FUP9[CPb('7uE$YI*jnl_%25s7YiHcY2%fqu*iH%_RDs`lEm\L<O<(I0qW5chtL)V!*aZf-N++<][]!j7-XU!:KmJGp0?uSr1uQD#f:*`2r?P*iqFX.X(XF$fYg_CS+eQ;p92"7O70eu%5p"L(Xk`sH?5X.*k81adbH6QCpRof#9cD+$?%":-"HFi?I"C=K-:j9J,B-?:,Q.6)dmg>.\kZ.9lb.I^*%PtPp[nmMa..A1%"V<D%,D8@#INg5G+=j"tJbW=uige?3j)kUaQ998m70L#tcI0+lF9<mQg@Hk2C6PP"T>"%[Id0YO50+X7mRA/X4'3-YD-e"N'Dj!^lec?u%=0^$fO@7]P/%m%;j&6b,*_RnAk(4erm@oYeJ&*)p%iEe;N,bsdnno414.eGNPKg,=psZANjNj9C^0CF+>eUGIolZIO1$ZoPjZ/j$%6b7(OW8fS<W&nXu%a=CZ0aa(4+f$.fjKYJSR.Euk_)o@51[8KEN4-gaLoti+=?YKS(ZrU"?-')k*r<Cm].U+b<PI<._0mVpiYMV*%-&>o^.#@WPP;f]pS9Hlq5((sG"dCF#9rq[\[t;A:dE4M.ACdOCAR(f06("ch'SO2Ejb#N%-bf2h"Wk">aKm\VgrlRSq@Ot]#lOu3%2<:8UXhDu;ZKK=5S7L)YJbp#?>L1ak=B9h`@t*ImI#Y381eLU8T=!f$&Wp:]@8YFM=hP=uKPjS/-\VTP3'5!.:?%2TE8(>n5;*fd%XjXZQi^(2iH&7!;_^9LeHTV2f)HbVDM15.ajL>iAhC!]ODo1^CI?4XT?'akQq4e8la#I@cM6N[,KKd9C9+o&h&J;\'4@bUYQipWa%;i_(5FDnQWK_MNWNsLjYGUu=?&4ZeMj7DW=+@0lC3-(=lg^ur)D?Hah:ItU"H=AmkpG_:/4VI,\-r0b%,8,M1lZ#62+7R>8R>L=k%B0c[f>n)tTmeAJm%q^JX-H</NI#_j9<"K(:9EW'gIk1l>Sp>uD!3t,;`U2<qXb[k/rA!=Ln1-?/+G).)'H5]f`T<9/6V+IJdGV*W%6,jJMk?[N%7q&DWY!e.Y#;OD&6d4gj?eYTCGrEa1"+]kA"M&P4#rCo=AJdfNNaU2`Clg:`5m54>-)JqQERQAgrqc2,;hCAi6pUtN%EYug937rfX1'5>Ub!\8j/u_Ihk=]B1lh&d**`"RsDpDuZqK.p&mmiV_jtcI/$<D5)OtY$hW?;gu/.8(+O3RJ_2Va1^9:($ha3m6V%G\ic/3Z$k^+jij?Z0O*)V2Z[O7\6"#])F5\BUtc(!:sWY4:EOuIBH6cK;XiY8!,4sZAp*0Ob[*0o3&TO'3h8pUOm91=H-#/^A=IJ%8N;u:0+I11A`N`A[_Ou/q22a-HtLou)nD.oBiVXM6Y?G7H`&J[4KS(]QMiM`P=93oh"K/rPhBN&2llW*c)gCacj^-)AsXN6(g2Gp%b2!6k\3,[-iU2kR4>6mDfYVgnIWnTX]H'5$h-/DF_d'P2kXDYi>LNQVCT@hl)mqS0=d:Wi9E#<9oD@4PI'HcD?g,rh%qYRr=:Oon%;ge=XB6E(3r\N3u:1Z0L,1,r,?4kk9*lPrRGn9(GQ2c,b(LL-feCW"nhN=!t2LO.9'L2\1<H9T62qBq0@R_Gi6gf>BfKtk`&i0>.%FRV0tO(ST=SgUFXEi"+H1Q549S,,*5c3id.#b/iW".q9^A1t]*iiVZB>G^&o&'GL.RBu2!D<"FMr.4Uj3u=N9Jl&fVQbF$ZXGdQX%\mPfdgaD9klg.S0B'Na4p?l!0`0iSmE1om1rMg$k?ZV3r.Hrgm)'4sK+=l7hP<WPSCl`M\8qP$#0,4*Q?uHP<jn;:]/t^mjg7#VY%gV2*Q9p^@c)[(bi&_=r<K"+4H;t,$/&oF8E'`$?VeJlc82R@k:k'=)$n+FJsT+h&1Hh`%1^(gniEdmi.&FiJkH_tgnnkGs-VC3g3%%)/]_cP6",(>i*&B8Rmgqt[,gcW\UkCnk\+*R-:s=6[nTUY\1P5<V+do8C/E>cGB6Wb9TR<jc5:J$&a_]@FK>J#PB=q;m"'Hs54X%F3Lc_?0f4rVpC'a^MIhJ/-mjE%^"ZWBZSZ1JpMcblaOLt]K>dt[C5a4\QfO;_+4sYl+=!@^'>U`M1rA#NtZS)hqa..a!Z-)lZ[>X%iI1ND@e&qsCLTjqe50r!Ss#<;5i6[*a80\eI/g_KX4jkol,nG8g]pj5g?NO#nb)+p`kL21F*9cs.oom3NUuQ2oll*R[n9/#[/PBt%EY$sD,>1L>r^R\k-XcH,@Uem*k;EbJgVq+t;Jd':qh.17-C2gN$"3_jkJZ.S@r5\Sq>#>GiNDC=$8"Z!O](Xc34,!!Bc];^WD1-4%o9u1P]jr3GSqE5k?4ngUXX^S0GJ,<64%iqM`%VhPNq5U;WKZPhfj0j-q0/ZkCpmR?)?uL@OF,T<fmo6uT:K8R0:(c'RLkP"jGOK2%-(kWCrlA0k@c54dpR`Dq`Bca(7huX"Y[Gd=)[esN)=2^Jl78?r5eo1;1ckq?6LGgD.!$/Wk1ViE8<F);ogr_GFIeNF-[SM#e,Oi&%/<uEO+tLU"eVao"ISioeW:8gg+"nH^XHt9'1"tE)ED@Q0mEnT["BG?\EDc?p4MOeo3VU/VBN:*P)pXZ]?qHej4>CDTdD.42M#[$=%.1T[e0Kd90-*SlF<gP>uZO\S$.Za<&C\_bVq2I8sk10B*i+,#/]"<4XNm;a-]m^.Jp\%uLTK(V6\G]<9S[j0^2913s-I5hU!m+50%;rB%L2S\Rikd/#,<r0<rIu1/<I5"eqZ;L:B<^]khKirK<Tsk0/bHq+J^m'/JB`[UW7\$YA*t2idI$[%_$Y:e!AeB4d")QmA.;"mp%`=,9S'JrZA"2]*pV<K@lRjTV"Fse'gf"]4\RH^Z;@?(Tgb/sq9-&:j:]Nk!)YG+q^%8GqWe>UBg;X2Q%A@UkrFA]PifA=m4?4[>8%abQ4U_0t"rdqrr6A)`92I?ZFD[(2jO.6UsYM]DKj[(*b6-S8^7Dh!Y&rW<?bg6_YAr4j+]_KGqV4=FXV=p<A[%XDD0e&=*XES3#@%RQ4oI+"3"l]8ohCqeGUcHLoB*]hH$.B\pW<Xd/4X=:nr&EuA0eBSP!+BAj+[Tac\3b#iXJjsCe)_\"XCI84K'/*0@kPib*8d6hW)%V/np6Mbi(>&.=cfp$KPOe?""r8'[kV-eHpnjEX^?5&q^0.s*,=eUe;uWDAtZ#`+CsPHkGQBf6Nq7''$Y(GpWrf.0MjLQsA)BY:a/%&Hn$OWba-g]m*lEdN>#!Sb/XeJX^P5nt)n(J3@d(e^d)Y*'oE7IBRDb5mSMor(&dTU4`@<Z_1PHb<a5'j^L%E+=-n&KXORZ?IGqS%MM2$:Y1i`S,QSq3#nl;+F-Z4g5:$o!9-GM+8%m=]`9*s",Zq7_[=W$WZWh8j!?M".3u*];$Q?s#++&N8b&AJhFs]1-)k\Arj2kfM%0IruOR#?L9!$HTmc2?KB_>kA2ecX/ieeKpK391qSO2QnPGt(&oR(04hnn17`1s-Xp8P'ebWRQ"iida-#`8Y$VeXa.W([#jn;*g-n%@29Xm5\/u47:mu7Ys].s0gn;A1JB/:RZgG53AsA=,;Bo7n6$)H2B2u[""F266#/[l6B`On.=ZVc-?o/6TmEP\^E25=E>#h1_Q1/-%M9"&K.V4`'\O%d%V%NO9<"/9KE%AYeR6`qVlN*]<MFKkrj9ieuTa`g_)<qe8U%_o2]>j+ZD!PdDm57fQ!RRQ=a4JC8.A:;YPDP;C%U62i\R7]!LEC>jW:7D\EMfBCHmGhtm:!(PEOYP4k&%;KW*VM_H2Cfc+c+DS@3;0k7Z+6373;0k7Z)+WW*0*2M?u-7dlOClUG;(qs%jIU>WE<ft]^L\Z14'ODIge5[V9o%c5Z\E[:L):k]SLaJ$f`/JnC^dtB6.l4J&8[g6n%hr-/0W["JXsVaja4%Ks$;."n#`=[MuSmR%b4er!IeaNMWtmg9(!Ek@ri49D=j*r.$@%AKZe`8)*['PO"XlC5GMcc4JpF\*Is>]LeGe%R3Ao._.I\GY[,&Bp3I/k+iPEI\KA504%e]k.9q#f9*gm#tKmafimpSl]E[K#BUZ0:3:i,!<^^RXJu2c+]E57=5`DP/o#R_r())]7O.:<Aj]s,2BghK"M;)BSpq_^G6>%i"sm%Dr_H#=$MrI4kBOo_\t0g9fI#VoNP<8pe.=<%=3McHd$o]208BXn9Bm\7E\-p7E*>4k;:./Wk.KV/\PgX\qTVfX/MJaT!u)$ALLS#%$S9KH>A@$ETTsm_h4eDHG5a,WPrM3<F1DI*0Q$$ndIU['VH$S0eYG)m&Vb#\9r$p@"uaneNbOk_@-B'U5_leBH3JLQeV-1-_srU`%f-sl+(nkVF?l(BrCDL4-j@31tFA*U3mU-bHKWT#H>h(_6"TVi[:!n]Q&8B&D7L0-RU+:uU%hd0rD/(<8@MqU=1U)iUX^r8*_[^'"%$]kbuCVPn&$UM&!I*WL,E`M&E/Y4BSODoD#6d2+(\iO<(lAeRp@9C+!"hJ15e<hl4)AF%80gP>goV1Id0(P07(C^Jn$l1ilbqZT8%,0T!!3:L@q'cBG7!tl[M,=`_r(jUbd_1B.IG)BiUP<h.)k$inDRg.88F'Zg:?uB@mMB\Q)q?*GDW_Tmt]<H+V,=CWs15h$H_pOAH%0IbL+MRm:1J(oupq$"hLVTh9G,.m((e4;hZOl2,]pEV*g)i;rB`@Os>oA4^d%I1I7O-;+[ILpc$FdOiq8C+@N4#f:&/'IH0kCnd5%':,gd?`IVOi]$M^+qn*ZV]r2*^bB_QQq0UnEn-oDQu9.%WteV>nI62s;%?GD]BH2thMIJc.2oe+CBca$_7LW3[9'.(eon"5)_*CC%6nD/FX"7lnI'gd[6l]@ZkbZlsmWVF6SYAH0$GU]kAYEkN7GEQ:bG#*R.+!N])!E(LbNlquK9HEaY3#kRSd.KW-pS3o0O0:XAP&Yp%58jX:2D(-2Y+f\i%`0_'oOu(5>$M@j1Ber7&kCmn5h<5`-WjoKX<]>?jb#uK9HGm,YfOihrZodG.tWL0m@b^(YB#c-"0n(e;#k7`%L>%Vn1,*S;*X4mG&RbZB'OUpo0YdZc=C)5@#(Vjb"%`2A76tDH4U`I+#8eT3+,p;&\n,Tl6%BNQeR3kLk!4@LECH/p;A'8d#S_h<%cs[YuJZGMIf8D<l=<KIF/5"M?Ta6fHEuYhk-B^t)J1<;`bnl7<9-q<(=XI(@P4M9sDu*;%W%@.L^lj#L23o_f7^55+%0E;/L/)%/%SuO*uL]s*FOK*FSJUiSoE,5`9<j0H>1(_V1_&Fj:,RmR68nB:Hr#(u4><0.[^_?ka9Jp'5Y<31d2&.hu@=bC)&4"WBcNNhHHlL9_%&k85n72fU?,Mr](%@A4>qNNn*C=o3B>g'U[$o"Fj+E5+#1Z2&'E<C>k\e2)%_$o6,K'Jh5L0@P6e9o[K1DF8p8K5l(n80j^jOmoR%MJ%UaScVBK(lW*[ajE`Xb/;<0_*"gt3eB!4#)gch1r5R!/-LY5L.,puH<d<I)12f#-]2bLcN<]r!p^;;U2>Y72ja^X)0`b_6"Uh8%iefi+bT"'1JK^&._TRm30I2QN93%E^5WVCoK,,;#gJpp1:dlmL,^lKm#*\99MB0(>F;G?P`UPN6*L.MfOgMo76,3QnMPLD&Tm.??%lmZ=najG>KQlN<:Xs?WR!TmhX<tTQEJ4(cU\3VnfO=sTk:fDO>Ztl=W['45173DeWL#o=9Uk2<q*!?G*9jCFT"'#Gs":H,JJ7T:d%)HbuOaYDi\<HEkr//_WH+ffpFl#hOEl2dd62,O?M1ls._?Sp1oK'H_KlRGPP@W(!5U'fRR#o4pX_feRubG#!f\lgl_Yc4S=4JKe2%;hVB.>kNt2=OoGL!6Lot!"@;a9cAPHnt^eUe=_7uJWk,)M'>n.c#>e)imUC30M/+3b&r7"2@3fBU*r,U[\FI4'h]]LEU$N>m5iu[%?BMuDOYa(XM'5rd6o;bVW'=+"W%+fH1ScX&&5FQ)>cB>4<2mO%=C'""J@b6-Uq2Xa4EVfo$Kqj4'W.nq^:mEP3_Uoo$WOB8n^W>n%7oYA'k(4Jt(Fk4goWJDiKrT[^ijc_::gg]c_Sne:_CP-KKe2feKnSIM$e\HD?c^W>$:Bj*>8I@;^s\?Iqc*c)4FIg4,u7sJ63mDa%!_OFASI\V*5_0;p_cI[7<Jk5h'o#d(&0rCtN:>t);hZXc/IM'?J/)/H.h"0%JA)"'Fg4AFI0!jZNTKWUM/nJk#8IH)>AWn"'sLk`%a78g+9VR1)18$97fSH!!jm*9X$osb#W@qdJ5[Sb);I;sCT"^:L"n[KgN@4#1E'7JL0ad+PM7$^2nH>6[&tX1("k_u/ipuaGD"N^K%$(q8#BONDr('XCQgalPM5R01ldGBK+-sNDu3<MR*-t'e/Uf\UW-ik3&4V(R-W!"K/c_^cD#0eX@iW@(&gB%^Ur%5R4%S/]1!or&Z%Q\>XNVZPUaGG#&-)R&(Z*0GsclRu@1Ys=<gSf\C?:eVT3/@5K3LT$t1_p29<VE-Cl)R#/n!8T*4WDhDV5$Gh@6CJ4ce8/@!RUF^?%^p4B6$5?R>!YQdFVPEMo'[a@@r-$St7["d=eptWSZUZ;k,>0_P'qrFILmXi(<S/Q6BY#._FT:8-TeU%*lj#=(OM4P!CUV"a`&'To%526]K!/$T;(hh\9=`>6DJS%j,5VcOiW2_)@JD>r:X0?@El)gX;"1u]u'o`Po'4t4aF^geKP"8V>OcB&<c7JH%eZg*Hh2<O5coT&\%bRTBe:a6'dLK*20)li0dK>Ma3\7i`*%aQ>F0nJY`!;;]EK%A=MJH@6D72le3)A\a0c&OOg726Me>i\AY(0)p4D<\N1'SG?/kXHZt%i>"IjQ>4mTXW%C1_sJc!JF$#Z;I,1ueM(7n=LDFPUarV0'lYBd@lU1mMDq$EU)CO3"bm+gM$BkLmabd]KFuHjbmU94OF%tK)R*S*%DQ6-c>RcDll:m%&C',n'bdY)WTnj8q<oel96d!CI#RhWC3kG8@9m3T?C/@<7j"3D7?+C07W.=sA$5c2>m-@Igj:MN(=?MGOV,@KO%OAfb,3/\Q!#>(:*#l"R\S"='G@drS=m`+s>1iP13KL0se$hFc7>[+$r<&Be?#`r?DB[1_;6.u@m@0](,V4#.$\#>aU-5suMZ4.*I%fIOHsC_B:c&I:a-AiQ,>3nlQ+jh]C(3ja]^q6CqY:]Y+3!7[2])C[-9">QR:2D66n<sJ):@8<3iEV"g7!r"KE3u(6h7:;#jbds67%_Se,2?^_61$HUf\3RS1jV%KP#`'RZVY^%OHH:)"*O_*hKQj0X!#E)hke?Li,Dn,O"D(S_[]:'EdZ3Z,eb&m\e&sbRCgH+OF-id/f%2DgIkjB/.9X$?ndi0l,',[*SaK2of%#cVM.@ZbMI*R-@=5a==oY!\1V+)K"5X=H=HTq3IZ`C\)Of4<=_Np[^&,M0?Q5TQ)2MTp[*%A)?.+=@/hj:D"f/(bC1Wa!)NIj;Q7TL3c[[p1TKs-D-j0$B=="Ah5,Z\CAad0m>o)Ga]KX9O#mHRMh#_$TV7$B%:m(^.GGb"e\*9%J7_h&LV8"_*KWdGmO;aq-8tN31\puH(e_i,"XZ:cV..FGP0UdN`e+NOYXuNecaI`WSmKD<i&ElmQa+US-4tPA$V1^4]c;E3^$M'k%]hC+f%%^e&IRsKcHC;bSPk+H%%G#Yb[7p?tXr5U0KX7@tC70mpC7;LbdEPXLJ6'Z6OHkj(Q*J+_=i$9n`sGY*H$ufR7Cp?nR^=gc%O:%4URALkSa&gDcio#BR<6A<.r[+V0r;obH#E'Rn6mr&`H$YmoUA"0N1)84#KO1OlW1I%e_8:ZAf?.1sG,sS9AO=a#9i!>SQO:tc%e2#DTf:>ma`3pTME`0G99&0:<C7.%ad6^hig]U6ON)Sl-:-^7<#rse4.H;)HN)[s<#&F[O:.@F@NK(-*M;J_?pN/0]\=m)h3glX#%X=Ap!`ZgnZOjM5,Wg!8p$S5\BJ5.GcOL"ND!,6-OKi4f$6.^pjPYjo3+'C()Os=Xk9!+$U[L:=DCLoOL'Nc9$4pjs'6!HuqALoM<%XbBe&WMXFAVj46sAW)PTZ<uO(j^8[7AL^Mudo4H>'2H3DQ>&1WF%In2E(L-[o&(Aa!0%`?b#i2aVWql,-B.=@AKi-9CA:DhH!,,L%V9DS2ZTY//bL]Vo8t#J&@QdG#RH:L6H>4<*aCb%o1<i"SHqLe?"U_:C;TllXTpC="UmA!q5fkVM1+`LSp7>Tf,1k;d1_u$aOBPei%+^ZZ3,GH6@8sq@i%+S;!=F^lU?RHLm'\i/"1)?h"AUF9>f"@j3!M.HiXBVAZjI)8oR08c"HTe'f8I*t.,&(U>cn/2fZnaAKU:UH.%gnTDq1_41;pGK0s!;$X>A+D,-P(Q"+$TBWQZRjjj.m^q2_M>8'?Se4^,%MZ\*6F(mECGBt(r;pimIPWs5W:bSPmC&o8L'*3*uk?Q%%,D6JCML(1>Ut?./4$/^/U9aXYS#r]TH=QLL>U3ek?Djr@$'H)FI]ibPReo6"E<)H#)dFAc#?%$9*!uXHA&SamM8k5TSu2KC$gs\%Q4Su=j=<S<MQ8,-a<-%pmX3cF/IF<K6]a`rSl*m+2&O#E\q,uY3#-0.+0Qs:TkkL;6Ne#f8,n^P"ejtR(Crr^k["Sl1L5SB[]F'*%:0\A<7'o#W%HE=nVH$Hf3cQH02KG/cCa()?N\>AV)[_9T5pj/+?ier?.c;UcU\;[:5>a`o2ej7=0b%r%q.sN]$!@M="I>_j)i2.[%J0q2Rdb-2E+eS4DBMX3\l'5pq)o10h&EL1TLFeR_O:^J$UNiHDO`=A81a!B;*DBNt5C69lqKdOrSQB75<9E,h^N1_m:n%u>/PmBO%"[)'9$DLTBD%XrVECio2ci\%^T,aE""-thn;=Y:!(k7>C9*%o^%mkf[*gE>rCD.sKDJ^2tO.&;Z=h&\'WC0*<6N^s'Ck&+J6:Y=c%csb,69i+^cc+sBG5$.rP:*=Wm.b$!6*iP_H;2O!@YJ;M[BN*in/JoNpJ=Ri.VXmrC/'bOS'.g4X+<6[b%NY5YCgaUY*j^LL63e)0%mT.\%KSQk3M\'+L<m[P*AtZ,WmKbk"dEpM8:JNjie,fWSLOo1\>D%I#$BbdqTd.6-.T+PJDWGnA\YtWa&_r%V2"^Hn>!cg#Q[lpe%(hbA1j=l.N+QFL!ao%uD.B)?EZ%k)SpSMC/_Yu2sAe55H<Fr*J*?NSQ8s4ftKSSo=p*=?c=R8s4.O.oH[W;Dh=[4.0S!oinP]JGc%miRufQjq;O2\jWEK&0%R%?g<&L0Gc>Bo%U]0l,\rLkaKY8uFfl@u=pm?uu>oIP[WQ"H#YbE?m#BZn2]dJK1_sUPV`LOf'djGBZ=(%^E1uO@^mTQeqL=ZL`1NpjSBRB[:5ho=$7JUij;,eq4AWD"<bD=,hO^S_8p?e-g,0UmVsF.(pd_6p;DeWfB%;'_>UZr"ZBPZNLXL1%H*3?aTIIng$F>qmi^,nl\D35*!#+_J;H.7!""W;s^lW2hL!eYr.]UP;IgI]r+m=ePEO)IBl+AJKCOFF<q:W=V`A_<?a46P.\BJ;N%W1_m2Q5oZGFIY`FZBZhPoY<cGrAJ?9ZV$Cp2t.\PIuld#M(47:#BAB:.Oco'<Jk&d7AJhJW]INF'ek4/=Yn,J?okr!P3+bgj%0ec%`0t0+1Hs3@L$N5A[!jTtaJkmaT5@q]<_SFC@9\Cs5-7-;_8UIE)O$0+6h\r)82G(6*-udAX(,Vs/dO*[;5f323a>$0-l<5O+c)#V%khJM09Yq1e"ikG[N44EeXn6GYW%Gn$UJ`q>>(HFn5s:6$G_6p-BBY8F@@(kN$fZZ3X_Z9$Zf0P96d`G5BJr\"JK[PPcte5Nitj6i%m=6Lk71hGh!RPeLNXg<@.nuS.T_cF@(.;!ijAJZ2Ljg6H=oA%5LP$8;gTlCT9OLf[SB5Y!,R+T.lk4C[d`SpkDLb';]FQpnTXYJo%=%-a]T)!(1:GJ0mTtmG`67ef4IaC!Qbr'1j)Lda-@W2_2V*71^:]oP3+bDtT"[gAhChU1G`Y)DDKXN==[fg!tTQ"t0A5Wi`"8N^o%YV(\H;t(\h)]$gM1_hi1+P8usOTWOtg!N>h@tBR7<b&m!3l,bK8<HM6T%k.unX[[;70I@/I)_&MLr2RYU\B_$lDPW1+G&HI!3jTg%'m_cW-V&?o7P+U)P?XEagEtO.:+\`;&ohd=V*;u>:MZ1T<F]h$&IJf]YZ-<ZKOhd]pM"RSOMlAXJtl4#(=b<a^M89K`qKi#8^8>o%+V7^#8>6O",G"7kr7\N#JN"US,&(o6K&eaPlS\o""fDE7a)K/NLlNc($-\FgdU<Q1/^[i2RiMojEGQ-PJ4K1._)!WI_Fibm,4]@i%D&%5_@OGiEid:<Zj/CYoM^=*I,rT]KF^_c_dm`^T4=^c^)6cK5%ihCAZ4m:>5b2O<QJb[u<DYd*>FR`$W"X##5]mHqOppE)1gKa%%huI"\F9&A)L1&t>i3OS/<$qY_:'H]i7]RUSTYq$a?mH/(T\;d9p(fsoQHhnZ\]5:39NDB4IU7[63l5_MR0B#rUo05AMQ,O>0a'e9%KRGX1m5/F5Kr9K3=6Vl9.!O<q=0!WBL2BuK%NW0FKh(QOng\B8\$-Rijln\5%m7d#7+!*/nW,YWI!.*h6:FBO:-\T`%,Bp$8$l#F%+H>Pb_lf[6#3%D?<"%$^d;3<S0^1&NS!rRs"*,3DLU_3\5lg=gR(=Q-Ym!<.3c065d<)<JO3$;aMKD3-&e55mDXt8?@S!T97JmeX%KKa)T:NA:d;fF4"Fq!6$3$rG#(G)9&:]_$E7'g#rE;bFEVm?\S[PW<]?.'!T!ern(QmUO5GZ<r@"Hn/b_Vei^[NSh9^;?#r.QM)h%!!lH>WQ.m+CN18D#;%9dMTnj,n@0pEB:\r[]$>+@>\/0&iWs:5('R]7H4tJ$C=GQn7Q.)u&NsF0o5QHVhkW%Eo(O;2W%5-,8m(;Y%VQdjEg(@-=_3DfY+R9sO7B7H52/LZl(r0NL*+DA!OGlkh9En4Q`eRccj^HUb*M%9h6fHtucs80pNkp*.SkP>od0ta(Ji&UJ,mK5/%X?e1rJ]<;`&9o/p8`pkr)0U[>7/s7OnAm1F`RIV?8#k!W"F=K^K98U;,<RL?E@"lbOOeDf`mlt]:/NJ0\ER6']tq9Gc[;IgZI1Wj%dYo*[7YF#D3)S`?Zj88.<>Y]s(1?9Em+d4[UiRQ74NEJBS?-eo%sjC9.cRe;8L-un>#:_6U5=b"BDEI:$^r/+i/JEP/pY8GSRt_d%)+96cA>\:f7-BbSg0hb'X0>E#KQPY]kqkkmg,)XYX3ode4O=R-18r'H6ALk'6G;A,:^l[:V+Ug8o7;t(gs@-s^.9epCm32e2!TY9%:cp,S\OXemU)(>`2)n2q"PD]Nn;r=YHRe]^3]*INNi#Y[nH;$3@EA.4J:]=1XA!M>kR%oV3lOCXjFh1">3"igU6!V]0c:u4C/gq>%!`+GW)Oa6q)kkBh$.=OuF;/%l03A9r'3_)2`o9f2lpetSD*"lJCl;Wc/h),=>iUAVPgBEp<";3g+XCN%80iMZ("fKS"XHag3J!bP%(`-n04<lUeH<(cL:gF3L@#;nk%)A8b;fLb'cZ0;!!c-SC*(/@-%MO'[,W&q+VF_=5P6Ye_F?E3CIn%XY*Br>3(PoQ>K*"JrO!HEY%^1JNe.(k"J9I'Yt=jb1hT0aSLi$m'j7Zi<LjRke0g8%6ZUbdSK<7(7Ch1UeB$p'.-Z$?-P-*RKIZNWJ._Hf8-'NmQ=[``.V%NEbI%a`^fhl(fG9S;M'Df3$E<&!cm1j@Rk"L5)El2q_d)O@NQrB+(JHn_#`e$eEkfkX<J$&sFI%'U",QO^;f1a]oj?4q.P1.<Ul$$K:'o%5q'n'4Cu(NIKZ9_.tC/>":kGg:qS#`h!lRKpgb*9f%;d7/gYV"UK#$AbpHt?hXOI.ot`-9#)Yu^FY&LpWjl8j:'"(IJ[+8S3ZAOT%YW+3ORtX].N8GhD5hOf!31Mgm=3rsaX.<'2[_e7kFG/U/BO6(`h$s(.6I)II74j0ZZZ0?-ra)/)$i!C>88"cPcSirK$uAm2M*j.V%7ehqT%*oip6ec%=Sm&?G(-N8b#H\;:*7E9A_k('eo2t!M$14\\)>>IK#G"#)[.d'_iMrUf[.h&O'1#qa__J+pq(rWn1u%9J'pq)H%8&,aB5=c+8TP)te7;%6b87Q"WD=YF-"\WO\CSMC?!s:dqk/mRVLD1Y](qBA-#cWR4%*=@RbU>_QW*8seo)t+:Ii(>m6;8,"Di6C`%F;;]??$`r!Pe=-98!Bi@`A;]f5d)FqP,f6>U)g2-J2O;nK=63>b)p-k8cXhhBP8R)QsC)f$kK`P,?GWLH&/\02:Q(b+6;)F\4pO_%D4BmpU))fVJ.f*2W<\n8C8sVnak:G;K9f>7n9>mF-pCJF(`o\CLDS?0TSZMOVTsOi(OUDQI/tWZ"mAD6*-kb$3t@lkViB$`lFN`+%BW0Rn+Fjn4,+e,TBQ1NcJTa!AXR[]E=2\@<.>6Cm`KEeMFG-Hbk]?N%Tg$h'bbk^,2:F6T_U]R"6_7hX4JN,LAuG_7-f^S5ET3`;%7Z@ctT66^/+prAnoQVS:W9+D^7aDuV;qNC6WGJ+9p'D,0cRM_d8`DN51rP5aND#XO';HLg.Ug-tF>8#6WoMHI?m]i11_c\*@2Q\O%Tifbt*(V@lY_H`r53)Xc`X`jcgLCW3Tbb#j#qp>-UT5>X-^]2_`\mUS0i:J_H,!mjS;dmcd!(3enP$hE^V0$ooP#;VXbiQFCuLIe%UcBE*K-c7H2*c*.1P^sa`PR%$PUa(;3T6I9@/+D39"9F!-9aK_<o^7a"MdUi(b^[&dFDZ`_Z9$E(UU<KUPe?c$H'1rb9?YhD=[dq%@FDK?lB0A`CdB@IETo<;SBOMMh4bf?*oo_%Jn>6.+&LS+UG,S,3,m[I=UsmA#Ygu&KmjJ`&OS1X>Scrg;T6T#=J4s])-NJB=VtV%%UpTAg'MnTXP4'=#)\`?F^GYZ5C'5.`4Z*4gE2\IuCmtqRYQQhW`\G-Y"%?L"kZ4Pb'G*Y;Qm?`)MX]!`Phh)WE/o`.Kbh6pGZ/u2%[/cDKn?t%A:_O=O$iRL\@7?3!bE9(GLZpQf3_I;K3TL<9\EXZEZu3.&7]T8$HkDWO)OO$lOdh6>E1"[4P<fk8SoN&PdEs?:67$;f%@Od@KM1P4&.P15U;[\R@R2tk4,AIEqU/@Qj&d.;)M<NCX01C6(1V(H&!NgAn_;2DO\O[K!U@Um]fPqR>5kAEjRmT"-8:`h?J8g^C%;h6*[*3_qc`Xl=$eiC>[,rW/M)/Y'0`Y#(6-0.7c/ksV"6;per-E1S9;7.5T)3.gNr^]Y,eD9%=mDqUG*1]=o6,%"XSB6"P&7or=%BS(1c\/s"=EbL%U[R_iiP,X5f1nG9<f7!.N((aYj[[8/BJ1OA=`Wfn&Qm/\KoPC;6`b1'\$.p1RkBMUH:^oePj@fr*'(Dt/!2cR$%MUDX>5VknT0*7\9@aLl^L]rICM#=,PU@Qo7=CU85K>C^aB_inQ`fY'Xl@G@)8)GN8+>X>h@"Y&m2+%[NZiNN>cs;DsW>&VJ2?iMa%/Wi2H4J4KA%Drr`crLSPd!4Bq;%I9S)$Z9_3#=D9-:T4X>!%"M?`7=s9.0cCCLGdF4Hk<4O]$?>3SakLBtc<)(8WhHk&@=_m3.:S%#!nm^=s>%;G=uFiRtg1,.V/q70q;ippmjkIO!(s+E'>T0)JWqE37N_cf^u7Jr+m8kSr\_L2CIjdEJMjA;3ea9S(J?^PM??0M(oVE%p[1!HF;.jbHXelphcK&FR!XXDj)U!U&8?C:.D1Y78_3)Cp,?H<a=W3r@*"p/.9A![_P'O19o#)[N]_9JRq[`o*V6F"4JP[h\I[^G%:"8JEN>-TIVTVFi%Fdl9$m%C'`s:j'M5Do'E['dn(ha7LJm.B:Ts;OJH=OGc53`V8TNqm+1hcWektDHu,>'Z)!1AcVWp*>Sdoeus%QjooOk(OCJ2QS?TU,*14*I@q8T_c5o/gF)'lQ4AkF^B,=*o#Wk0('WtJl1(YZfXfU0e$Or$m:NLG6AQP&(JBQ225b"qL%(XYl[&J%Y0CH3n6A1='/Vdq=DiuAC+8@!OC7VNhdNrZX,N2_RF^G$0eIPenh:A)M\!=Zp'.GFZbeX\Nm=FrI$oR#/m#iBL:!\M;0XF1Y4G3b%!n82UCD0Lh:!-ogC7D^YiL-F1i>EZq3+fFmFl&Zt/>"((&BgbW_PJm,35P2kgcG"J)UuR@HjYoV`/-0gN5Z57h2r(E=/cAjh@OO_%;>PdS3kJBrQK1(k_1%/\F2/P^<+T+lc_V'`(^-#;7_07getHsMmM;]>$,=1:pPl,^Hd/V)F0<[.T?,06N#4:$Z3LJ_$c<lXM`"J3%BlqnT@c2n'KA5[h/4r)L`9@TZpmti1J&t;5p[A(!*gS8TXqd@c@2eC"PECl0ii:>?mQCK=P70Um,@6h,R0mZa(]g#9C/@l#ApXdH%1GD6o7fT3@T&,]-CQo']?]#oG]8H.dS'lioRPkFH->)gT,p)bE4LW&!l!tB7Bd$t'=,MFVG,Sp%?h/Jf6;_>JEReB(aZB;DSg-5!%pTBP=6luI"IYsl<_tq!+G\EA&WXg'jStsGlQ^miHo9)HWmFe(:Rn3fFolSYbmPDHU+4#@;hiNoQ7k>=M`&r!tnj6gmT6[H;LsKj`%]:[8;(XYL7#ns-`F5?/bf<4:@F%BI/(fsTu!KLuLgThXMF@_)4Tek1%[Gn=-]APu`/V:b7E>J*Q"DFBmI6Sca2tstf]m'K9SAca-%_d'?NARhr.6r6C6bQQNi$Q_;FQEQQuK6HEn#$#g/E"sg@XUI7M/o^U(I(.0+R/>#qjOS^Nq/bPBftN)n]5.(Q2!("hP>2LW[0fLI%][>B>E\F><g>^L8d2TIC2028^"kLgR6OE70\i=1+b+VBX\N#8Gr>^GqDlqD^cT+Smbc0gokMM>#7nCfRUSXYF!b.Y,)OS$PM];dq%4\,?*HZTPD@sUjkd&/9a4RV[iSX<[$o=CMPIMi_.9Si`Xmntog>4p]0`A;"GhJ&_I!VQ7Yh5+AfkS=+;YGdL;_9@*hA1s93XlD+Y%'&AmKW''pA*qleE[i9k>'dL-4^Jo1l3:_=5SZeQN1Z<<==jI3lj/hm2^#.f;$'i1;Nb=%$\MN*C"arQXp1&Dj!NLl8!S*]PB.M3_%*FCcGmt?5M8G8PQ&4#&nUj3(aNQob<c:^)'DO`4kX*`7E,N:W@gnXf-Waj[KYKog=2M3HkX*Fq0;a.O`mi5fL!sak?Gst+r/#^Hn%7CF#cA+VP++r?B-i0&@R+`/`Z/j*0maRD=SES"*82:jXJd!O]KSBq'[)BnP":&$=&h)o]<EdblSlbkjF^f=V,<_Ur,OAd0W9O^Yr%Lc4!m^PNf*Mmb=^jk'Y#q@l?N$!peo88XL'g'R[fA[iqM)r%iN9,A%]fi^VYDqPDj+[-4](Xt6bBEFdr]bBAsUBV--moM\=O0mQ0%$F,K^ko&0b%q!uk6pF`S*)AaK.pRp/R?FqeU(YL":s^!(O99/&KJ>?(/Yh=m8*j`q2S&N8WhZ\\O-iR098*r#(;@^g*ZB?N6G6q.%CZU.(9P.@[I-QK\g(r"&BWi81^.>!BC`8FTa0?#"O1eE"-C0.`NJ[Du:k,i=D,Lkq#dtm>C\V&\924&$JR;I;TH;s@f#lY+So:.X%Lm8E"&?\rTcl$2+:u&,<=Znb0F\E%k60>l'UT>P=48leV@qK3I_s;X-.gKt1?="ED1m_YCdWesSV/0@'QjfbDM;U2.=t=ApE2HD]%TsoI$a26pembR@p/0\MH*2D1KZ((#-26N8i=/,IY[BY.B7%(!eXQ-^P-3_"ASp&n4qmp9OBBnoPMm6BF"K#iPM1llF<NeqeCpB=8%P'Y;+ehUgL@&/uI-mY+9H(*!t%`FYag^h0ZHAo\Xp9-:$2Y_0/9B,Be2EZ.&Qa::4!@*L=FJ].qDClBhSW0%H59CP#+F,[?TZJ&q%^;=1go1T0k%PEk-P'itX(3!:>><'cNg+99^e&T"6NkjuHf8Vdolp%(KpSY2md'#g8M]P2dnorncD@g%tDZ*_,[<bUs@6Xf9U:eZV%TplpD+8Z<B$@!tF_T[#ZT^MG2=-G7tm2LbD^<1b)NM't!i:.VlH']a(EPf\bjqA[uQ*++nGfSEK&)oU\j6i,C%A*t;;OiLH.3I5e%.4:^K@<%%lbGEfd5;#BZafOD2jb3gKr[nk.o0YusHD](93%N:I@33IjNsf!!:ps%;mDtq0\,%QZ7FQmrjO*Yq6J(qu!b-Hr<kY4G%kq%-8jmkP8.31GPoCiHDMSC)F=KYHtLKAfT<1P#Q\DoVDkJRO#k4iskbSlcpZ`>8\TJ#9jP<,O/3G(uZO)!Ag5&g,DibHC7LVO=3%(+!I1jCp:5]f,^n(ba%W-<*)tMsp0&fH,#bSe6Ln?JL[gYGaVFgLb`10hO/GDGh2E^3c!'I0uZU"=lYjj#'7;(nIOFE:CR'.^6gl%!8APg;O4`(#TFUnIT_-k3[B-iEhWBhg-d:!Hbj1;JA8$upVQksi!-#.m`P)9prcYiXLe^[nCjYj[#W%Lfc2hbF7iO>6:9G=?VStD%F1J7V"7K,"q>:uE/-aeiatH]_LNmN>?t:PjpT+q!)RHFX4"5A1GI8q?GAe_f\`.Aj:CV-f$r]F7'q^8FE9s2\jIg0UP\eXagKP+1%ngnfVF"o9l-3qi<e)LNa*2V[FgeDUG1Gk!F;gNHApH.M*%cQ7"B5VY,kQ.n!pOX]1B_0mhOL*uu>4j_gE9`."1`c+VD#iM-r%Ih9%>-J+HRpM<2[u]m-3)qH,\)Zag@I<gRS(k(%VC<8,f[9M:HU@s5_20\sjN+2gLQ4c(C9,8hGR($T31&L=X#^BGJm(a%K[u#FEhJ;>%:4GR[UaA>?AT8&We%pqpHA6S$l*ned$5Q)nat]piipa4-MT(N=8eoCn]JsngiW<+j`+bF]IKmp=`BjX%R=ha"cOJthC@i*\Bj\ci%;!T:030s<WZ`X1JW>lR\CfUO/>V(g+i[un2EE.^\ZCE!%h#m3,0MTWK;cbJXJ`:8*&Ur8:Yp]6*jB\1-44F[=,<*8j]d)M>*ILDO%nO4'74\t!V]5Gf9OIk,DXuEXB=GSKs5-H$49"Yp$lOGeba68rTqBL4nDtG8U&O9B%i3/o[TqV.ihDArMj2)]^E#ijI/_6<R8K\dj%n$iMkKLjA=_q6+obHrgC6h%",8b7jm3;ifqqm^RhZ=(k'_)0*Q)ABt*CUk5G&1Q^Qg`Iele.AN8G4.VW4oU=7RkiS)4[ramq;mD]%mV9^5K*J@/U<>.Y71r4jkJI/*4'r/_eT>"XG%5)kkYBo7\J\7S+&6&K5c#3E$P5.W*j9UGmglm+f5PC,P_%Dk/UM-m@jId'U_=f_%XbA.H$E-Y#,nPS2#R>6!*4+7,lYZLDHsU0*CLrdr7QOGc"iCm;_t/9&%p.G`ID]n*V*k]8_X'cWCuIRjdp0Shb:Q7mb#m.snLRT@%;ZhYWmc=:t9%-TJVG%YIM[_dr5[Ph2E:-s;kZ/LPX6$F;?9uQ1JX.J%!+;(0'KF;bK'>AXbJ8;O1V3[X@n'u!cGtle`@hGsBFuGk%brPt02Pj6/rU#!j`OlhZ5s+,(TuiTJ5Z_<!*fQ+D[PoR[c)LH!X&O1H/!VOf6+^[#J/.c\Dj1Na459-9IPm@pC="@(Off:C-(X0j%C"Y+La"`='U*m1k)pK]#6+>0;O.o<s$:<^QqI7c9=hjQdYiJj,>HSic%qVKo0V5/fES+[WeIbj>.HX[D=&)_QJTj_<((7&u/fFVF%#\N3dDibSR)LsK>a4g&B+n'hgKV3()h-jek^3r8]rq2dZ8*F6-`u(URC%=l1[$JP2GV3&MQn>gn+4h1]l:.W/r32\%#9RIp\1?KG%Q-+((("C_sbWk^a8IY+nW\W_-=fQ!"XRMbqP_>bQ<qmjC6Oo/B#ABC_iB+f1$97Ssj7N\#AL:/EO4.,59,j[Mmdrk:+C:"tJS<Ze%X-";(N](]J3jm=#;eD$'BmYm`]-)BY&^iS+^YDp6oY!rA(E4U4>kr_RhJM[IlL>64bCRBnpM%F2D\2`c)hPN6@2)nA^ejI1Kh12c%j+*<.C.AB6L3XRP#E$#DW1AK7j2oVi7H3&PSP;N7i?pV-Tm4(_IgSODou)$XY(A$S%q)dB_Bs8L&[tor9^pqJTTetLF#bkil8Z3r%4bV+>2^""9[M\`j57p2RTJrCc3V112SEaIoY@T>E%U?K=$sJ-Z=cZOKcLp8OnXu\&q(^e^gm:7@7>Y5J@BG2AkVeuWS(\Q%%HrbX%Gb=)C9qS&:3@mHW*)*c&qtJ6b8KO2R1F]=mGCNC[9?;9PN4cK/LNXr:O7#pR8nR.Ua?8U2KA2jnT3oU$>[#Ue1OYW4C(O6<-Ot]s%de:0TGPpO#9o^EKcN_HQKCj/b^<?Z:bI_.Y9\W+T+a:o3W8js%TH3H:mW%l49#h`LTkJuSrB@VShaQbO0;8aeK2GHQ%?:^>gkds2%;1E9khlF[.6b+52h[n7.IhP'A!#j-NmSG!D!u#XX\Vuse5<p;lO-f5oO:,n$bU7&HVZ`7,9#0aq(@pql,-KL(O=_g?]Yt<s\4@CE%at7"a.t&&`o5GBd"YQ6f&caY`QI+Y<SV2n_Y<N%c0IN,I`8-b_X9a,i-d[dNgPLu2;@Rf^bLUD'Y4im`lRtuR:,q97ltQNBfVrR-%p+nrrkT^??=G<]H46r^:!XUl]\dmP-%:tK'<d=^MbZPK\0gJh69&6H<Tk+asFFud&9Njul5GWg?7Z;G<%$Kt<;mQZmS0>c^ks-7&%KcIXSdmdHdJ6`2?F^M^\?s0lh?!!lMaX/`a.#[HWNZ/.,fN*DBWNM@N@X5F/HGkrg<!'Q3[5G8(0DL'Jd+P612FVD?,I6*UI;/UV%(-Un/mRX[9iD&UaZPT'AUkSSpDhcF;AUln!U8n?QTrYNe9F;04]OureN:VJ'Q2KmrXHO%$3#K5mR8p0^OG(IO6a<B0S>NLl<*5@O%i?mr@MFVWGG<UXOmJq(.NaSC__AKU,)d=O@E^k:D#1d;1HA9QmB3(].#&JSGf[ts\<Vk3h":2`4?MapH$8Zp%Xr*Ci434A])GKmf%PQ\rq)K.a"dAP6TE>5A5XO-]=6k2tAEa[u2X`:1l,`-I[>m4HWCfaXa=W1('$V,@)oQ*oMZe&'Zj>$RsL%6+t(UW2LP8ECBP-,D*%rtbV'G7&oL5?lD7:q^N6Z=Inkq3Pul6Oi(CF*O)u?rU1>Ze.ZkA(I%aWA39,BV3h*^*^QaF*NZ<9Kd(pf:?L*fQD^?f-V+G/1b(L%*1k$N>FbsCo/s?(dmJM4PXh&8_JeMm1VP1iB[$&8+,S[JHpe-f)Ed9pE,%lE^g4N''+]Q(1p&i9ln:+j/ituX<bS7p>ZOGb$ud0,%]uI-0[-jUC`A&BoCPcDo9[;Jq+s3_f>2U*5+$eG?dlnMbll?*r(qYm++MZqb6;2"NQF2rpY3_u(G/plF;n;FG&86#nVWp\hAc7)7%0t%el1k@N)lkjT"3,j:Ps%b/0']n"sg`%Yg)*+:E`#l/oO@TI0[qg%!ciN&,9VXL]U*"!M2c@;K3n5Y=!WNi;igGW6CV_KJVlTuZ%+&E?)_7=W^QWd#R4a5eWA'&t]gkPK9=O*1("^Z)f?8klD#W$gC$_34Md(pULO`26aZ5@]8q]I>YMh-Zb_Ju%/*>7F(!7/fQ@Rp-u%q,Qnd!WK93+0@04KZCG"%GP$/mb+mJkqP[#=`t[cq](bu\?\50LhD"pat,*"?"e5T"u,T#b%/m@4<9tFbDN[UEa?YiU?K;u6*X[+%?L+jZ]EH^,Cf+mjAq.S5'LX`b<,G+9+c1'jAQ9q'Ka38eZrk4?=kImK?[geC;@55(40NRQ-:]UeC8V33U%qS5JDk]oo0)Yt\m8K#%C:oaiIV1A]E,/c7maD;t!jI:5>14BKXa.m)7%]d*Slnq&=NcXR.s)X5^*CI6Ypd#a"Bf6*Z&Kde*'>s:fNqDbk`_=;\hVFg/])Ua%%uMO<4K`tl;\D^#2Kk(TWmCrHNWLu"#%^1m(<LfuHkarT)^H#fGCdIOD5KF.+_SD!SAqlCX_aup7i\2''bXd%7An@,p7@ip[h[ob%lN+(S$[K^5Wf^eG9:YjF\@ai&cTP,+7`*FmB'/nS/pbfiCW(&EP;dVbS/0$/G=C+!b-5K)-C@JkiQVH/p9lI[cLc+pZ@4)]cKgff%n&g&pb/mb)3p60o,a;%(+2Y6=6Q<[C(cDR`))S<1Z!,#:.tm#A7ttBXiS5.k[tI,,>[2Qj'/UB;lniR]"'I21\I+?rf\X.?L(Ka;%=Zpt_.907I,/I?bW_)inUR1M*+`r9KF:X=>C*=MqNf1lh8X*(RE68T17M3f"&ic*>h,1i'Y\i9:GnT0&;u*<@?(j1*:3e_7<u(/I%UKT&M">[h$5T/N;S1DN*4Fp9*+Uc5pNc76!<p2V0a?q?Ul*[fG-bKrQ_(&n(UY=qk3_Gip:0U5jr"1jSFlZ#Q?d\7eQ.c4;Co>-"%LReiSB2H#ZbG&mq6?2-(mVK+(i1UdNf.9E.(r>TC,@OXuT#Ip3Ue`,n.!mG("I!#!As>%RXO*asB^?qUn#/Lmn<6*SJKg0H[YNGN%J;tL6EYp$%r4p=W>/@.%IR341e6K@/_tNsN"sq_bA;ph@a?(k'84Y=4eKjgDO'=2lE\V4h[c\1aRn8fQ`PQpgV1is%QPEDi80.M#%iO,tV(SO%B-:\6cC@[(>`D`gnki"u["I.XulmZ$6oK>;Zn>jcXnh7@@Qt4]K<a7tU9np!k.qt!]@]HV/?R'W;qW2>r+Ng2X5(@iQ%<lP.7=k(',n8Sj\TWp#EG=FS+[OcH1Q+>7,k9I>kIjkYWF(LaArKnMPi8=of8)W+4U?M6D#,+-mG?uB#^B@l]I6e@8*dGin"HnUT%>EmCekJn&r-?FS=pXt1?P^',5B@4B_4'4ed.oC%>4A@D9j.[G.8?YC29^uf;=&k'F4,d30*XIlgCr6g.#*F>_?^`k56^&F'M"3iW%U5:Zg">,(7W1e`MJs!m@5UWh@;4]"S9%Q\_OS2\JA,IOk+YM'*nr\e.+pk)%i\Uin`FA]C9kq(A.'S,R,4#TtlBW_h2,6Q*kOg=M%'i7<r/!&72eqhck#X`HPgZO9YJs530=<fdqge*@@)0U].1!OdFIlomSjl1DAdP(#G>K[L6$c1JC0?(eekuj:eY!>_5rN6^=Nf9#0%:R`K4OKs^XlhO0$-$*2YrM7>^nmMrG3-U0?Z?f$'Z#m+"CW&]_lXY_HOFU5s1!9rg</ZKqYCN+%bUQ8K\mQ6H):#r3Zqp&R&gWKh%6&(=nHpPN1B2>8<e9EQUjg'JRkZ:%&&7PkCUY`Fgg[q\(.BWB@p`[S>mT-tr@^A*lqt9rG=#TV9DQ[!p6[,3$r])21WuaKuPkE0j%bo8[$R$8V#=I"GD^ijKuio9B:E_/"jiBeECf,OaiK@G8p=+7uf@ih5Kka[$X6.,&q*+gUP^=0)o!Kaop7]r'^0JQTO\OnCP8%.4o%%TtfVfU0//8\JTW=5A=".<8LDi#F8X.Z#*JP)dcUgDXrQC\ub`+E9[hg%b7QM#>^)=WO`eaSY&JOfkHl&0d]i)'Bp;YXYjjo<Hu9%*D++c;\.4X?</dFb>I`$Pr1k\-g;`L9)buiX(7"<Bh/:E<;1c,O($unr(<%^$Xg_rXg@7j'SseLoKZ]Z/CX=!$_nLTkLaEDnp!&4%fq"pd!B9Sm]S-EDmj7)7$8K;++Cr,=V2D-pTD,!)M#n'#+5RGUZH_f8BW096F_niZiZ%[$bM+F`g?V\$(k;!b+S%oF9+.-"-X+<+%T$[!tNKk=de_-&M<sXG&idD"7B#)9HNrKB?GNJ*5,M$l75l:#u5-Ha=liQoZ,OPq[^'LtmdQ6OT8<(V:s!\?;6T<jF/)Qm)[LZkK%QBS/(M(*/hm><od1>%.8<r#`t%Aolj;426B5A5g./imd\[`i9&_aCr[&GK@?l*b!SYGen5$8#mEYCor([u(ANPEM+"%-FG"Uq9&Z%#2?eZU>1pP_p7Wb@-@2P6IQ.)5&`S;mI-@^3.cQbqti!Y!QCMp1H>n<,r6NbdPnOLq2Dp5[RT:PQGC`"Rei,6b6'(pq^RI9%^&[%%/0+1PBD8')H7!N2C_his?0o=<194PSTn6\dmlt<p.ubFIdof6`&[Rs/,=+nA&+P0N(*:9RZ!0fbHET>\B%+P20ASc@d<3D79%fl<%.rJO_chb0R+PXm#-&^u&DkRAq9^k($e"VO;-;mPu]B,[gY>^TU+7CRdHP_"!?O/<-QjL;:jL\VqIrS*XR4)HR1i`DC.#I8ML#YN1%MP`i""M=fSqn'UFBdRPa:[E`jP/_fX5"eR\4.fPrVF"(:abJKf*!l3f\)L]-r@@*\R_29Sg8+6%q+.]bT%dQN-Ek&-H=#/L\7<@-%ls<UJ'@9Ai&<oJMG>0uee#RA=J+8'[j+SuqQb'&qTR(%*j_:%apk-uQ!kZX7F;7TH2,o^@8em.E%J*i@`GNG+M+*CSHaemZSB2Aa%baPH0Nj__dP^EU.hj'R8q%u#1=%F0>^hPsn>p^N^*3@3T=\I:D!Ff\bl>>UT/BM.<G'W$p2ndJJ_NjqN-oE@C\?!V\=hN1cA7bY\%H"iIi/QYbg=(TRM9]kF]Xu7e</nI^YFF67sb*R)/9*(-<?l`Iq/-(JmS3,-D#6!$0-8rkG:7m%2Yr.[h4Urhi>aDd'o"K1q&sHbD%2I"M/jp`ZHqNQW<$1^s9F9.'-"<>lrkp(@Ir%dK'Sjar87LQc>X_Kh^&NpYX@Y'0*(3YDmQNn4-"G*<aKrHg_]WdXHe3c]#p/U;0%9gW<6A`K1.5c;bl\7Ke!@)=Q^@mT/eW5T-((P1Z:]dp`>+p\`tQUU];0duCG:6<%p6sO.Y\?B5.XVM"gg!8'aA=t6?BfUduEF5Y%%*5Vmh!)EJ&Y5f['LF>bUY"I.NaM.'q8KZk68u52-N0lo,,N;0*`X$2bRIU,?VaXtJ@?t;#d\GS@XGLb:panU<?,t&9Dn??hq1cJ<%1UgV$mP:j2LN;Jd375%!)aCt@k=@3*]c+N`A`VD`R84@b)*!u23I3Sl'AG@1Pc?g\(t:7R*>od8_p#dN6m,qa[XlM</e_j]+kV$4%o5#<<54_1._s;aSp@_Dr[B7RLH`m[%b:g>,(m2.RDolbQ^V4fY*b^6Sh@mBoKUb0udnK@NZF^[`Pf'cA82i\e\UD'S(=AY]ltb;*%8D7KuSX^m*'Y#M:#j!)TSTa)SnbVj0TS?hAr*i89hHBJ*YB)'ql'9$<VS+a[9d(;9p)O@,%<7k!6l9fb.+39YHWoIpRGQm9faM(m%+np<"aI(\DDX5+0ABNu&')YZF-(n'sET`E`m86<m&XY)He`d/p8Ane9m;Y8TDnK,jZ6T*[[o=m!XQ-Th.?A,@]$p-V^ntaK(sfaC%82(!,g,"#G=lY=mrAhF(l("10r#K"ookZcAfrs,#cf#A?<Te8=F>HqWI&nma.`HfnkP8H?US@O,K)2''7iNr+W>dl`:\gS`\c]DE%#Ld5#*T(q_p$L&4!)FBD"u,a"Mc-Mp0o23`/esr2E2:lK,Drcs=SF4LG$!P2JMu*9f9&u=/oqdkQO1f9ej\`54b5U!)5+eo?.P8T%Jhf,B+lX_rDtCN"Cj9RZB-u8]4Ma9cMn2kX`PA;S$)PeXql!BPH8fPa&]s$YXg<-@Witu]^+3N>LDcgE&Im:sCo1=fGGQ)n#17^i%;,%$Q['0A;lA_'Hk)s9?Ar"2Pp^fr`$ma\\4g3%lTB+AilfeT+Ku"jT^)_)d"FCP/:N\+?b@)).)g="p,0ED^i#+q.gf7ck0cq.R%YiC<WQ"Q&<F-RTPZW8Zlo9pip4-ZE4A<8o%)S7;3$0][BT?/Ts$_@m4E[*Dp.hf1F>OgpBNR,t11#@Q69InZPm0f_lV49*RhVIcq%:1@glSX^H5,dUUCK5ta@0N\j9#ndln`JnR#r21g_hR7U31@EuU2/\7K>%-.8\.u;@j/jA$el^m[[GC=Vc@F%kAY?hC*koHE<bdkD%%c)rRZH!"lT,C@01"_.BD?Y?K\N&$^m+mnE&O'i.Y$].M@K2D!"_XciT&*p5\cR"gG"J1OW#U:fn=n2]f[1P#7%cWQ$,\YSfmX@.%RcFVDaR.6b'n41o'pDg>8NVj5RU8HYeWI3g';`pH1!tE3L%8CB-=h17/bW$>;Y(1;L'bMij_HNOQU_QRC_741].C^t0^3,P[KpA#%H%M)&-ZgeA@BfTFiedo(Rk:0rAQY5P)Zn^RgS!kE4?Trm4@>TNV/CQ<M[:e9eYtO]cZci%)afh$PBRFSS.M'#'RAJmf8L@2/7lO*%XMRJ@G\bVZ=a?3epEn2p1O8/?Qfaq20g[L?QU0D<43s"PRUp1ooiapN78]WZ_n9U)das]@kqQDJn;uN4oCXC%7iV\@(iNhCdS0'e%4#p;Q>R/GR)J,RI?+<`8:LJ>fH,.nb$rfT/jTEf_[=Wj_bkZ'4'gZ_VOdPf0aI'r)Rk6,^c!rqY+kq09R)(8hfibt+O*?6IPpU+q%<;:%Ef!"2W-Sd)u#J@>>YE_!H]M[eUdKDan@FGB)Oj<<S-=oNB1BZBs)JQ(8*poT::d>as3q#lgIchNH,!cY%kI<l:,0"<[+F@"@%Q>+\s5<HX(??q&&$/4QZ=XYisQ%NnnBD&h:g1VN=\Hl1qP\h[5_VdHC-VGAmJ6KR#nIN=jd&CA&0"g<C9oe5ni&1T@[J9AH_L-!5%oQGI_eg1tW,,$XKO)EdI=uh4"ZE/@,M_?d`e.ouLVa:?_4e28r>H1P<^<^Iu[Ng1cB0<?REuai>4F`KHdcmVR"oZo`S$'>+bU;jd%0dFt@4phSQ_K.BK?*C?/m.gh0$83u#29OQ*EDD-f`33nG"#KeD8HE3CO?7o35t``if<.XSJTI-P=Sqrr^c'?;-%YDo!ufMJ$kn(M%MQ\9X+KZfI@X"CY\2&]@#F`^T&,]eq?Q`&Q4r)4N**EeiWjmJ1()S2fUIWbjXPfuH/bRgqp^1$(=-sfJKJ8*(8Gb074<e,9;5b"U%27&<!5p+&)!*R0,6DBfNA<5Za<VB>5iKt:\0S4;U;o.rbYX+jBm0t+o,/3=L#NU`R/,0Clf.35?EYHcpK@1*1QbbHa.k(iVfg`IR%L`/:;g7q+3/N,_SImB#e+&14-`9g:-R[%D,Q'%5<T#i>=h2*[:o>tCGKX/8Fgc;<.m=Jj[EGEg=H.,@`pQ]T0^>nBM'@Y5Pq+0)'%S_U.kArdHg'NW?q2di3E[E%V\>nBqX:Xc(<`o9)4WG\n0BIW`6:=^+:A8jg/XcG_@era7cT;0(6%!s"[g9lI;5`BG_R_@<7p68pW%7KfJ3@\sbgK9P#'.nAY<"DT&^->k=V/DW3)BT_U:W\"WoKe/j)\%nR\bt1eL/*NNjnggrD<B)m."m?SbV-,8cYUNgSPcl"TI69AV%1?k/\OZ3!%1chOEp`^#qL1RIFKAi=5Bpbf%PXgn.<;IjLYd5OSr;6Em#=i)D!4F(T?&_qTFPEXcH/@`']<7G5`/cGa,\6W;!j2/6%piNKpX(P_aMYmHFFf('gp",fU,BPBEW\ZfPP3FNBme-QkYOep;PJsZEVSIX@Kip:3?>"8,nI=CP*o(,K8lCq%2'^a-&\JfjEcVt6%$*Q<DMal2ohN`ZW[/Ljr.%353#u.iSb:;[Zb<QJ@,b`>[Cg/.[:+kL9Q!)P*.s\tP0lnYof,Or]D+Wk9O_Na^B#VGuT,<Dc?<=Ki%C3\g_XF$k"S;`tSlqoS_*bdl*PFO9IF*B8_XD/+cXRs:N2q,Z5V9mR\\HN7E%%/G`gJL#9LsQ3X!=j&L.T`c!egO'gnnm/k$pC'j%;m_@]\.X8Kj&]=1`bFrASs:V7i_p'(V%S?HE,OOK[DS\K\!ndgF-od)*B*B@c7jC$R$#>mh!8V70_2SWQ:2XK7I,XfYLJBA^NNn?%=->(kp8,V]NLhhLT9#FD7d!otD0.5X)6.NsNa<+.Vb<Htpk:h;kh@M+K"P^DYGb42NQA',=*0DZA-5T)8\^s*HgmT^`g?k'7F]@i%FC,GJin_%;C4liZQI+)`-KK;>,F[^11]-'Prq%WH`Dc;VX)-P1KB2g>'10W+D^NM4QJEFVf")qlbm9Jp_&nLVao/W3e62%r;-r,l%+ZU!$Z?KDGY#3YnH8ge+>sg..,60J-=U(!6[A]Xe7:*9W]#YfD"2%eWhX,>Oc,b3sCQ07Md&;6.;*Z'^[mQP^;;fR`0qWiE,D=iQ%8.t9O<9KR"oFo..[JQ!4IVF\tQPF$RWqCb"j?#[-T>E:NlIh1fm"\&/-$AfMmBPLs9$R9J6Be"17UdH@*4Lshe?4?DCmrq\S=I^u%>E0kU)7e`"rn(9>GL#;I0W\87A(/:e(?W/;]ho*t!aM$(o`/lr+\$rc7V8sSBc0JP>qoa@W:GNccGILVf8k$nR%TTJf%c,s>;F;=%VJ;p]P<;ml+m&Y)p1XDHi4)f^P@SW+';#LfXEE$XD&ThU71r5U:.PhR@!_VI9bZ;5n77T6mT=`W2SB<jk/j?6JDE#%@0l![WKCU"%)+=^E!pfL^'dfK]6%'Y$n+3*dg*k$KH."S1d6uUQ+iXJ[%'Q*gk5!;p@]F@3ku"um0T9sF)*a453m9J%-5HE+*`YQ7>M<KLN]Tq/%QlD"Z]IQ;GMILK5",Xu0[X-r(<LN\6Mc)6U>,Zi"\(3RBXVqks3qk([MVpXSV/abIR"`I&?8sFP4m)*7"lceDkcJd>j^`aUV:kQ5%(mQpq<@U)QG9mVm(1bmhN(cqYPp?\"MH[jnH7!AI7o`(eeeKGm-MLmi.hdg);g1"/qKVFs4!;UA[)\C?cu'.PiH6_.f>@0mMHXJr%b3QYhq[If-+ApDZ@gsu&c_)[mYugb'[J,n2[1#dh\']HMIA)L^QrQ7WT5mad7rI9]RdKS$*l"31\mNQNdUStCMNXKZn&PL"?E6tu%GMPi)Aqb&G'MB5%4B:&CY>:U0UI?W`aG"j/7Q0o;S-_$0[\ogaoL;8-[WWE>UF;UDWt8$BYF"5[KKdV'krYMnI+?O@(i[K9h:tj[%mXh)qemHQGXB;Cr_7ZWqat`"GR5Bm003n<4NGl-04ipL>F8V)#%*Zb7gSZ^15X'\j^V9Zq\,Fd*q6*$]b<LLRqu?Z_kPt6?mXP2i%5Q'9ns762=rU$fgqV0=\s5PcIs7Lm@p<3L3^VBdAmIu,,jZe4ml'FX4iK&Kfjj1^@qs,n"rVj95s7GJ=rq>YRJ,8&Pr(hce<I#Yc%q<,NkLVN`[rrHPZ:At~>%AI9_PrivateDataEnd